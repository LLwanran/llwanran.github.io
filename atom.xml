<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://llwanran.github.io/"/>
  <updated>2018-01-08T08:09:58.127Z</updated>
  <id>https://llwanran.github.io/</id>
  
  <author>
    <name>LLwanran</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript中模块的发展历程</title>
    <link href="https://llwanran.github.io/posts/1099660432.html"/>
    <id>https://llwanran.github.io/posts/1099660432.html</id>
    <published>2018-01-06T09:29:00.000Z</published>
    <updated>2018-01-08T08:09:58.127Z</updated>
    
    <content type="html"><![CDATA[<h6 id="一、模块的重要性"><a href="#一、模块的重要性" class="headerlink" title="一、模块的重要性"></a>一、模块的重要性</h6><p>Javascript不是一种模块化编程语言，它不支持”类”（class），更别说”模块”（module）了。<br>开发者们做了很多努力，在现有的运行环境中，实现”模块”的效果。</p><h6 id="没有模块的日子里"><a href="#没有模块的日子里" class="headerlink" title="没有模块的日子里"></a>没有模块的日子里</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>后果：</p><p>全局变量的灾难；<br>函数命名冲突；<br>依赖关系不好管理。</p><h6 id="js模块的前身（为了解决以上问题）"><a href="#js模块的前身（为了解决以上问题）" class="headerlink" title="js模块的前身（为了解决以上问题）"></a>js模块的前身（为了解决以上问题）</h6><p><strong>1. 面对对象的写法：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a:<span class="number">1</span>,</span><br><span class="line">b:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>优点：<br>1、解决了变量污染的问题；<br>2、保证模块名唯一即可，建立同一模块内的成员的关系。<br>缺点：<br>1、暴露所有模块成员，内部状态可以被外部任意改写。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.a =<span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><p><strong>2. 匿名自执行函数：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">a:<span class="number">1</span>,</span><br><span class="line">b:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>优点：<br>1、解决暴露所有模块成员，内部状态可以被外部任意改写的问题。<br>缺点：<br>1、所需依赖还是得外部提前提供。</p><h6 id="二、commonJS"><a href="#二、commonJS" class="headerlink" title="二、commonJS"></a>二、commonJS</h6><p>2009年，对js是历史性的一年，nodeJS横空出世，让js跑在服务端，如果说js在浏览器上面可以没有模块，但是在服务端没有模块的思想是万万不能容忍的。<br>由Mozilla 的工程师 Kevin Dangoor 在2009年1月创建了commonJS规范。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建模块 one.js</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'aaaa'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">a: a,</span><br><span class="line">b: b</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//加载模块 two.js</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="built_in">require</span>(<span class="string">'./one.js'</span>);</span><br><span class="line">x.b();</span><br></pre></td></tr></table></figure></p><p>优点：<br>1、所有代码都运行在模块作用域，不会污染全局作用域；<br>2、独立性是模块的重要特点就，模块内部最好不与程序的其他部分直接交互；<br>3、模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存；<br>4、模块加载的顺序，按照其在代码中出现的顺序。<br>node推广了commonJS规范，但是在浏览器中又出现了很多问题<br>问题：<br>浏览器资源的加载方式与服务端完全不同。服务端require一个模块，直接就从硬盘或者内存中读取了，消耗的时间可以忽略。而浏览器则不同，需要从服务端来下载这个文件，然后运行里面的代码才能得到API，需要花费一个http请求，也就是说，require后面的一行代码，需要资源请求完成才能执行。<br>由于浏览器端是以插入script标签的形式来加载资源的（ajax方式不行，有跨域问题）没办法让代码同步执行，所以像commonjs那样的写法会直接报错。<br>这意味着要想适应浏览器，规范还要改进！！！<br>一个<a href="http://wiki.commonjs.org/wiki/Modules/Wrappings" target="_blank">Modules/Wrappings</a>规范出现了。</p><h6 id="三、AMD"><a href="#三、AMD" class="headerlink" title="三、AMD"></a>三、AMD</h6><p>经过一番谈论、修改（过程忽略），AMD思想出现了…<br>AMD（Asynchronous Module Definition）：</p><ul><li>异步模块定义规范制定了定义模块的规则，这样模块和模块的依赖可以被异步加载。这和浏览器的异步加载模块的环境刚好适应（浏览器同步加载模块会导致性能、可用性、调试和跨域访问等问题）。</li><li>依赖前置，预执行（异步加载：依赖先执行，依赖必须一开始就写好，会先尽早地执行(依赖)模块 。换句话说，所有的require都被提前执行（require 可以是全局或局部 ）。</li><li>相关Api(简单实例):<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义和暴露模块</span></span><br><span class="line">define(<span class="string">"xxx"</span>, [<span class="string">"xxx"</span>, <span class="string">"xxx"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">x, x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ... ;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//加载模块</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">"xxx"</span>, <span class="string">"../xxx"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">xxx, xxx</span>) </span>&#123;</span><br><span class="line">xxxx</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>具体Api请参见：<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank">AMD (中文版)</a></p><hr><p><strong>RequireJS</strong><br>说完AMD,就不得不提把AMD在浏览器实现的RequireJS。<br>RequireJS是一个JavaScript文件和模块加载器,采用AMD规范。<br>参考文件：<a href="http://requirejs.org/docs/start.html" target="_blank">RequireJS</a></p><h6 id="三、CMD"><a href="#三、CMD" class="headerlink" title="三、CMD"></a>三、CMD</h6><p>CMD（Common Module Definition）:</p><ul><li>CMD更贴近 CommonJS Modules/1.1 和 Node Modules 规范，一个模块就是一个文件；</li><li>它推崇依赖就近，想什么时候 require 就什么时候加载，实现了懒加载（延迟执行 ）；</li><li>它也没有全局 require， 每个API都简单纯粹；</li><li>不过RequireJS从2.0开始，也改成可以延迟执行。</li><li>相关Api(简单实例):<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义和暴露模块</span></span><br><span class="line">define(<span class="string">'xxx'</span>, [<span class="string">'xxx'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">xxx, xxx, xxx</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ... ;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//加载模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports</span>) </span>&#123; </span><br><span class="line"><span class="comment">// 获取模块 a 的接口</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>); </span><br><span class="line"><span class="comment">// 调用模块 a 的方法</span></span><br><span class="line">a.doSomething(); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>seaJS</strong></p><ul><li>SeaJS遵循的CMD,将CMD在浏览器中实现；</li><li>SeaJS 是一个模块加载器;</li><li>借鉴了 RequireJS 的不少东西</li></ul><p><a href="http://www.zhangxinxu.com/sp/seajs/" target="_blank">seajs官网</a></p><p><strong>其他</strong></p><p><strong>UMD</strong></p><p>既然CommonJs和AMD风格一样流行，似乎缺少一个统一的规范。所以人们产生了这样的需求，希望有支持两种风格的“通用”模式，于是通用模块规范（UMD）诞生了。</p><p><strong>es6 modules</strong></p><ul><li>ES6自带了模块化， 也是JS第一次支持module；</li></ul><p><strong>后记</strong></p><p>本文主要记述模块的思想在浏览器的实现过程，不是一篇详细的Api教程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;一、模块的重要性&quot;&gt;&lt;a href=&quot;#一、模块的重要性&quot; class=&quot;headerlink&quot; title=&quot;一、模块的重要性&quot;&gt;&lt;/a&gt;一、模块的重要性&lt;/h6&gt;&lt;p&gt;Javascript不是一种模块化编程语言，它不支持”类”（class），更别说”模块”（m
      
    
    </summary>
    
      <category term="别人的博客" scheme="https://llwanran.github.io/categories/%E5%88%AB%E4%BA%BA%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="前端" scheme="https://llwanran.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
