<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>婉然一笑 - Li的兰花指</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://llwanran.github.io/"/>
  <updated>2018-01-22T05:21:33.440Z</updated>
  <id>https://llwanran.github.io/</id>
  
  <author>
    <name>LLwanran</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript常用的设计模式</title>
    <link href="https://llwanran.github.io/posts/1842989949.html"/>
    <id>https://llwanran.github.io/posts/1842989949.html</id>
    <published>2018-01-22T01:56:00.000Z</published>
    <updated>2018-01-22T05:21:33.440Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用ES6实现"><a href="#使用ES6实现" class="headerlink" title="使用ES6实现"></a>使用ES6实现</h3><h5 id="设计模式分为三种类型，共23种"><a href="#设计模式分为三种类型，共23种" class="headerlink" title="设计模式分为三种类型，共23种"></a>设计模式分为三种类型，共23种</h5><ul><li>创建型模式：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。</li><li>结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。</li><li>行为型模式：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式（Interpreter模式）、状态模式、策略模式、职责链模式(责任链模式)、访问者模式。</li></ul><h6 id="创建型模式："><a href="#创建型模式：" class="headerlink" title="创建型模式："></a>创建型模式：</h6><ul><li>Signleton（单例模式）：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Signleton.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Singleton.prototype.Instance === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">            Singleton.prototype.Instance = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Singleton.prototype.Instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ob1 = <span class="keyword">new</span> Singleton(<span class="string">"one"</span>);</span><br><span class="line"><span class="keyword">let</span> ob2 = <span class="keyword">new</span> Singleton(<span class="string">"two"</span>);</span><br><span class="line"><span class="keyword">let</span> ob3 = <span class="keyword">new</span> Singleton(<span class="string">"Three"</span>);</span><br><span class="line">ob2.init = <span class="string">'Object flg'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ob1 === ob2);</span><br><span class="line"><span class="built_in">console</span>.log(ob1 === ob3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ob1);</span><br><span class="line"><span class="built_in">console</span>.log(ob2);</span><br><span class="line"><span class="built_in">console</span>.log(ob3);</span><br></pre></td></tr></table></figure><ul><li>AbstractFactory（抽象工厂模式）：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"># AbstractFactory.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"AbstractFactory class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createProductA(product) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"AbstractFactory.createProductA created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createProductB(product) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"AbstractFactory.createProductB created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteFactory1 class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createProductA(product) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory1 createProductA'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createProductB(product) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory1 createProductB'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteFactory2 class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createProductA(product) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory2 createProductA'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createProductB(product) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory2 createProductB'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractProductA class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractProductB class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductA1 class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductA2 class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductB1 class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductB2 class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> factory1 = <span class="keyword">new</span> ConcreteFactory1();</span><br><span class="line"><span class="keyword">var</span> productB1 = factory1.createProductB();</span><br><span class="line"><span class="keyword">var</span> productA1 = factory1.createProductA();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> factory2 = <span class="keyword">new</span> ConcreteFactory2();</span><br><span class="line"><span class="keyword">var</span> productA2 = factory2.createProductA();</span><br><span class="line"><span class="keyword">var</span> productB2 = factory2.createProductB();</span><br></pre></td></tr></table></figure><ul><li>Builder（建造者模式）：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># Builder.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Builder Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildPart(partName) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Builder.buildPart invoked!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteBuilder Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildPart(partName) &#123;</span><br><span class="line">        <span class="keyword">super</span>.buildPart(partName);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteBuilder.buildPart invoked!'</span>);</span><br><span class="line">        <span class="keyword">this</span>.product = <span class="keyword">new</span> Product(partName);</span><br><span class="line">    &#125;</span><br><span class="line">    getResult() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteBuilder.getResult invoked!'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(material) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Product class created"</span>);</span><br><span class="line">        <span class="keyword">this</span>.data = material</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.structure = [<span class="string">'Prod1'</span>, <span class="string">'Prod2'</span>, <span class="string">'Prod3'</span>];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Director class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    construct() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Director.Construct created"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prodName <span class="keyword">in</span> <span class="keyword">this</span>.structure) &#123;</span><br><span class="line">            <span class="keyword">let</span> builder = <span class="keyword">new</span> ConcreteBuilder();</span><br><span class="line">            builder.buildPart(<span class="keyword">this</span>.structure[prodName]);</span><br><span class="line">            builder.getResult();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> director = <span class="keyword">new</span> Director();</span><br><span class="line">director.construct();</span><br></pre></td></tr></table></figure><ul><li>Factory（工厂模式）：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。Factory Method使一个类的实例化延迟到其子类。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># Factory.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Product Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteProduct Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    factoryMethod() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator.factoryMethod created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    anOperation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator.anOperation created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.product = <span class="keyword">this</span>.factoryMethod();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.product <span class="keyword">instanceof</span> ConcreteProduct);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteCreator Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    factoryMethod() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> factory = <span class="keyword">new</span> ConcreteCreator();</span><br><span class="line">factory.anOperation();</span><br></pre></td></tr></table></figure><ul><li>Prototype（原型模式）：用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"># Prototype.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(prototype) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Prototype Class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setFeature(key, val) &#123;</span><br><span class="line">        <span class="keyword">this</span>[key] = val</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clone() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Prototype.clone invoked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype1</span> <span class="keyword">extends</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype1 created"</span>);</span><br><span class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 1"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clone() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcretePrototype1.clone invoked'</span>);</span><br><span class="line">        <span class="keyword">let</span> clone = <span class="keyword">new</span> ConcretePrototype1();</span><br><span class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        keys.forEach(<span class="function"><span class="params">k</span> =&gt;</span> clone.setFeature(k, <span class="keyword">this</span>[k]));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype1 cloned"</span>);</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype2</span> <span class="keyword">extends</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype2 created"</span>);</span><br><span class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 2"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clone() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcretePrototype2.Clone function'</span>);</span><br><span class="line">        <span class="keyword">let</span> clone = <span class="keyword">new</span> ConcretePrototype2();</span><br><span class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        keys.forEach(<span class="function"><span class="params">k</span> =&gt;</span> clone.setFeature(k, <span class="keyword">this</span>[k]));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype2 cloned"</span>);</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proto1 = <span class="keyword">new</span> ConcretePrototype1();</span><br><span class="line">proto1.setFeature(<span class="string">'feature'</span>, <span class="string">"feature 11"</span>);</span><br><span class="line"><span class="keyword">var</span> clone1 = proto1.clone();</span><br><span class="line"><span class="built_in">console</span>.log(clone1.feature);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> clone1);</span><br><span class="line"><span class="built_in">console</span>.log(clone1 === proto1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proto2 = <span class="keyword">new</span> ConcretePrototype2();</span><br><span class="line">proto2.setFeature(<span class="string">'feature'</span>, <span class="string">"feature 22"</span>);</span><br><span class="line"><span class="keyword">var</span> clone2 = proto2.clone();</span><br><span class="line"><span class="built_in">console</span>.log(clone2.feature);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> clone2);</span><br><span class="line"><span class="built_in">console</span>.log(clone2 === proto2);</span><br></pre></td></tr></table></figure><h6 id="结构型模式："><a href="#结构型模式：" class="headerlink" title="结构型模式："></a>结构型模式：</h6><ul><li>Adapter（适配器模式）：将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># Adapter.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(type) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Target Class created!'</span>);</span><br><span class="line">        <span class="keyword">let</span> result = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'adapter'</span>:</span><br><span class="line">                result = <span class="keyword">new</span> AdapterImpl();</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                result = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Target.request invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Adapter Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    specificRequest() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Adapter.specificRequest invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdapterImpl</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AdapterImpl Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AdapterImpl.request invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Target(<span class="string">"adapter"</span>);</span><br><span class="line">f.request();</span><br></pre></td></tr></table></figure><ul><li>Bridge（桥接模式）：将抽象部分与它的实现部分分离，使它们都可以独立地变化。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># Bridge.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Abstraction Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Abstraction.operation invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.imp.operationImp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'RefinedAbstraction Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setImp(imp) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'RefinedAbstraction.setImp invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.imp = imp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Implementor Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operationImp() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Implementor.operationImp invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorA Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operationImp() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorA.operationImp invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorB</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorB Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operationImp() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorB.operationImp invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> abstraction = <span class="keyword">new</span> RefinedAbstraction();</span><br><span class="line">abstraction.setImp(<span class="keyword">new</span> ConcreteImplementorA());</span><br><span class="line">abstraction.operation();</span><br><span class="line">abstraction.setImp(<span class="keyword">new</span> ConcreteImplementorB());</span><br><span class="line">abstraction.operation();</span><br></pre></td></tr></table></figure><ul><li>Composite（组合模式）：将对象组合成树形结构以表示“部分-整体”的层次结构。它使得客户对单个对象和复合对象的使用具有一致性。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"># Composite.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.operation invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(Component) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.add invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(Component) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.remove invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getChild(key) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.getChild invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Leaf Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Leaf.operation invoked'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.children = [];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite operation for: '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.children) &#123;</span><br><span class="line">            <span class="keyword">this</span>.children[i].operation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(Component) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite.add invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.children.push(Component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(Component) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite.remove invoked'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.children[i] === Component) &#123;</span><br><span class="line">                <span class="keyword">this</span>.children.splice(i, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getChild(key) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite.getChild invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.children[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> composite1 = <span class="keyword">new</span> Composite(<span class="string">'C1'</span>);</span><br><span class="line">composite1.add(<span class="keyword">new</span> Leaf(<span class="string">'L1'</span>));</span><br><span class="line">composite1.add(<span class="keyword">new</span> Leaf(<span class="string">'L2'</span>));</span><br><span class="line"><span class="keyword">var</span> composite2 = <span class="keyword">new</span> Composite(<span class="string">'C2'</span>);</span><br><span class="line">composite2.add(composite1);</span><br><span class="line">composite1.getChild(<span class="number">1</span>).operation();</span><br><span class="line">composite2.operation();</span><br></pre></td></tr></table></figure><ul><li>Decorator（装饰模式）：动态地给一个对象添加一些额外的职责。就扩展功能而言， 它比生成子类方式更为灵活。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"># Decorator.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.operation invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteComponent Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteComponent.operation invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(component) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.component = component;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Decorator Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Decorator.operation invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.component.operation()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(component, sign) &#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">        <span class="keyword">this</span>.addedState = sign;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorA Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="keyword">super</span>.operation();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorA.operation invoked'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.addedState)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorB</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(component, sign) &#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">        <span class="keyword">this</span>.addedState = sign;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorB Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="keyword">super</span>.operation();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorB.operation invoked'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addedBehavior() &#123;</span><br><span class="line">        <span class="keyword">this</span>.operation();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorB.operation invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> ConcreteComponent();</span><br><span class="line"><span class="keyword">var</span> decoratorA = <span class="keyword">new</span> ConcreteDecoratorA(component, <span class="string">'decoratorA'</span>);</span><br><span class="line"><span class="keyword">var</span> decoratorB = <span class="keyword">new</span> ConcreteDecoratorB(component, <span class="string">'decoratorB'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'component: '</span>);</span><br><span class="line">component.operation();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'decoratorA: '</span>);</span><br><span class="line">decoratorA.operation();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'decoratorB: '</span>);</span><br><span class="line">decoratorB.addedBehavior();</span><br></pre></td></tr></table></figure><ul><li>Facade（外观模式）：为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"># Facade.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Facade class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gotoPage(dp) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (dp) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Facade"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Facade"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"AbstractFactory"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the AbstractFactory"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Builder"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Builder"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Factory"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Factory"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Prototype"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Prototype"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Singleton"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Singleton"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Adapter"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Adapter"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Bridge"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Bridge"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Composite"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Composite"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Decorator"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Decorator"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Flyweight"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Flyweight"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Proxy"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Proxy"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"ChainofResponsibility"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the ChainofResponsibility"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Command"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Command"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Interpreter"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Interpreter"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Iterator"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Iterator"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Mediator"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Mediator"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Memento"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Memento"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Observer"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Observer"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"State"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the State"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Strategy"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Strategy"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"TemplateMethod"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the TemplateMethod"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Visitor"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Visitor"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"nothing to be matched"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> facade = <span class="keyword">new</span> Facade();</span><br><span class="line">facade.gotoPage(<span class="string">'Facade'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'AbstractFactory'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Builder'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Factory'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Prototype'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Singleton'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Adapter'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Bridge'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Composite'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Decorator'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Flyweight'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Proxy'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'ChainofResponsibility'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Command'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Interpreter'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Iterator'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Mediator'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Memento'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Observer'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'State'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Strategy'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'TemplateMethod'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Visitor'</span>);</span><br></pre></td></tr></table></figure><ul><li>Flyweight（享元模式）：运用共享技术有效地支持大量细粒度的对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"># Flyweight.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.flyweights = &#123;&#125;;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'FlyweightFactory Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getFlyweight(key) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'FlyweightFactory.getFlyweight invoked'</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.flyweights[key]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.flyweights[key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.flyweights[key] = <span class="keyword">new</span> ConcreteFlyweight(key);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.flyweights[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createGibberish(keys) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'FlyweightFactory.createGibberish invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UnsharedConcreteFlyweight(keys, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Flyweight Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation(extrinsicState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Flyweight.operation invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(key) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.intrinsicState = key;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFlyweight Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation(extrinsicState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFlyweight.operation invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> extrinsicState + <span class="keyword">this</span>.intrinsicState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(keys, flyweights) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.flyweights = flyweights;</span><br><span class="line">        <span class="keyword">this</span>.keys = keys;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'UnsharedConcreteFlyweight Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation(extrinsicState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'UnsharedConcreteFlyweight.operation invoked'</span>);</span><br><span class="line">        <span class="keyword">var</span> key, word = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; extrinsicState; i++) &#123;</span><br><span class="line">            key = <span class="keyword">this</span>.keys[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="keyword">this</span>.keys.length))];</span><br><span class="line">            word = <span class="keyword">this</span>.flyweights.getFlyweight(key).operation(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'UnsharedConcreteFlyweight Operation: '</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(word);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flyweights = <span class="keyword">new</span> FlyweightFactory();</span><br><span class="line"><span class="keyword">var</span> gibberish = flyweights.createGibberish([<span class="string">'-'</span>, <span class="string">'+'</span>, <span class="string">'*'</span>]);</span><br><span class="line">gibberish.operation(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><ul><li>Proxy（（代理模式）：为其他对象提供一个代理以控制对这个对象的访问。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># Proxy.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject.request invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'RealSubject Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'RealSubject.request invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Proxy Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">        <span class="keyword">this</span>.realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        <span class="keyword">this</span>.realSubject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>()</span><br><span class="line">proxy.request()</span><br></pre></td></tr></table></figure><h6 id="行为型模式："><a href="#行为型模式：" class="headerlink" title="行为型模式："></a>行为型模式：</h6><ul><li>Chain of Responsibility（责任链模式）：为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># Chain of Responsibility.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Handler Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleRequest() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Handler.handleRequest invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler1 Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setSuccessor(successor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler1.setSuccessor invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleRequest(request) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler1.handleRequest invoked'</span>);</span><br><span class="line">        <span class="keyword">if</span> (request === <span class="string">'run'</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler1 has handled the request'</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler1 calls his successor'</span>);</span><br><span class="line">            <span class="keyword">this</span>.successor.handleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler2 Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleRequest(request) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler2.handleRequest invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handle1 = <span class="keyword">new</span> ConcreteHandler1();</span><br><span class="line"><span class="keyword">let</span> handle2 = <span class="keyword">new</span> ConcreteHandler2();</span><br><span class="line">handle1.setSuccessor(handle2);</span><br><span class="line">handle1.handleRequest(<span class="string">'run'</span>);</span><br><span class="line">handle1.handleRequest(<span class="string">'stay'</span>);</span><br></pre></td></tr></table></figure><ul><li>Command（命令模式）：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># Command.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Invoker Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    storeCommand(command) &#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Invoker.storeCommand invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Command Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    execute() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Command.execute invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(receiver, state) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteCommand Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    execute() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteCommand.execute invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Receiver Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    action() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Receiver.action invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line"><span class="keyword">var</span> receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line"><span class="keyword">var</span> command = <span class="keyword">new</span> ConcreteCommand(receiver);</span><br><span class="line">invoker.storeCommand(command);</span><br><span class="line">invoker.command.execute();</span><br></pre></td></tr></table></figure><ul><li>Interpreter（解析器模式）：给定一个语言, 定义它的文法的一种表示，并定义一个解释器, 该解释器使用该表示来解释语言中的句子。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"># Interpreter.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(input) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.list = [];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(eps) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.add invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.list.push(eps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getList() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.getList invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getSum() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.getSum invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setSum(_sum) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sum = _sum;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.setSum invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractExpression Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interpret(context) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractExpression.interpret invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlusExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'PlusExpression Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interpret(context) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'PlusExpression.interpret invoked'</span>);</span><br><span class="line">        <span class="keyword">var</span> sum = context.getSum();</span><br><span class="line">        sum++;</span><br><span class="line">        context.setSum(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinusExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'+'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'MinusExpression Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interpret(context) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'MinusExpression.interpret invoked'</span>);</span><br><span class="line">        <span class="keyword">var</span> sum = context.getSum();</span><br><span class="line">        sum--;</span><br><span class="line">        context.setSum(sum)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> Context();</span><br><span class="line">context.setSum(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">context.add(<span class="keyword">new</span> PlusExpression());</span><br><span class="line">context.add(<span class="keyword">new</span> PlusExpression());</span><br><span class="line">context.add(<span class="keyword">new</span> PlusExpression());</span><br><span class="line"></span><br><span class="line">context.add(<span class="keyword">new</span> MinusExpression());</span><br><span class="line">context.add(<span class="keyword">new</span> MinusExpression());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = context.getList();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> expression = list[i];</span><br><span class="line">    expression.interpret(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Result："</span> + context.getSum());</span><br></pre></td></tr></table></figure><ul><li>Iterator（迭代器模式）：提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"># Iterator.js</span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    first() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator.first invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator.next invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isDone() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator.isDone invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentItem() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator.currentItem invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">extends</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(aggregate) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.aggregate = aggregate;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteIterator Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    first() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteIterator.first invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.aggregate.list[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteIterator.next invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.index += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.aggregate.list[<span class="keyword">this</span>.index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentItem() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteIterator.currentItem invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.aggregate.list[<span class="keyword">this</span>.index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Aggregate Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createIterator() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Aggregate.CreateIterator invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">extends</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(list) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteAggregate Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createIterator() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteAggregate.CreateIterator invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.iterator = <span class="keyword">new</span> ConcreteIterator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aggregate = <span class="keyword">new</span> ConcreteAggregate([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]);</span><br><span class="line">aggregate.createIterator();</span><br><span class="line"><span class="built_in">console</span>.log(aggregate.iterator.first());</span><br><span class="line"><span class="built_in">console</span>.log(aggregate.iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(aggregate.iterator.currentItem());</span><br></pre></td></tr></table></figure><ul><li>Mediator（中介模式）：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"># Mediator.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Mediator Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    colleagueChanged(colleague) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Mediator.colleagueChanged invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteMediator Class created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.colleague1 = <span class="keyword">new</span> ConcreteColleague1(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.colleague2 = <span class="keyword">new</span> ConcreteColleague2(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    colleagueChanged(colleague) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteMediator.colleagueChanged invoked'</span>);</span><br><span class="line">        <span class="keyword">switch</span> (colleague) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">this</span>.colleague1:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague1 has Changed -&gt; change ConcreteColleague2.feature: '</span>);</span><br><span class="line">                <span class="keyword">this</span>.colleague2.setFeature(<span class="string">'new feature 2'</span>);</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">this</span>.colleague2:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague2 has Changed, but do nothing'</span>);</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Do nothing'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Colleague Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    changed() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Colleague.changed invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.mediator.colleagueChanged(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(mediator) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague1 Class created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setFeature(feature) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague1.setFeature invoked'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague1 Feature has changed from '</span> + <span class="keyword">this</span>.feature + <span class="string">' to '</span> + feature)</span><br><span class="line">        <span class="keyword">this</span>.feature = feature;</span><br><span class="line">        <span class="keyword">this</span>.changed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(mediator) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague2 Class created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setFeature(feature) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague2.setFeature invoked'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague2 Feature has changed from '</span> + <span class="keyword">this</span>.feature + <span class="string">' to '</span> + feature);</span><br><span class="line">        <span class="keyword">this</span>.feature = feature;</span><br><span class="line">        <span class="keyword">this</span>.changed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line">mediator.colleague1.setFeature(<span class="string">"new feature 1"</span>);</span><br></pre></td></tr></table></figure><ul><li>Memento（备忘录模式）：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"># Memento.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Originator Class created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'a'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Originator created. State= '</span> + <span class="keyword">this</span>.state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setMemento(Memento) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Originator.setMemento invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.state = Memento.getState();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Originator.setMemento State= '</span> + <span class="keyword">this</span>.state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createMemento(state) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Originator.createMemento invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(state) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Memento Class created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Memento created. State= '</span> + <span class="keyword">this</span>.state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getState() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Memento.getState invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(state) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Memento.setState invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Caretaker Class created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.mementos = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addMemento(memento) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Caretaker.addMemento invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.mementos.push(memento)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setMemento() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Caretaker.setMemento invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mementos[<span class="keyword">this</span>.mementos.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line"><span class="keyword">let</span> originator = <span class="keyword">new</span> Originator();</span><br><span class="line">caretaker.addMemento(originator.createMemento(<span class="string">'b'</span>));</span><br><span class="line">originator.setMemento(caretaker.setMemento());</span><br><span class="line"><span class="built_in">console</span>.log(originator.state);</span><br></pre></td></tr></table></figure><ul><li>Observer（观察者模式）：定义对象间的一种一对多的依赖关系,以便当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并自动刷新。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"># Observer.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    attach(observer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.push(observer);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject.attach invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dettach(observer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject.dettach invoked'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.observers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.observers[i] === observer) &#123;</span><br><span class="line">                <span class="keyword">this</span>.observers.splice(i, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject.notify invoked'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.observers) &#123;</span><br><span class="line">            <span class="keyword">this</span>.observers[i].update(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.subjectState = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.observers = [];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteSubject Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getState() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteSubject.getState invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.subjectState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(state) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteSubject.setState invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.subjectState = state;</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Observer Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Observer.update invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.observerState = <span class="string">''</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteObserver Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    update(Subject) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteObserver.update invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.observerState = Subject.getState();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Observer new state: '</span> + <span class="keyword">this</span>.observerState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> observer1 = <span class="keyword">new</span> ConcreteObserver();</span><br><span class="line"><span class="keyword">var</span> observer2 = <span class="keyword">new</span> ConcreteObserver();</span><br><span class="line"><span class="keyword">var</span> subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">subject.attach(observer1);</span><br><span class="line">subject.attach(observer2);</span><br><span class="line">subject.setState(<span class="string">'state 1'</span>);</span><br></pre></td></tr></table></figure><ul><li>State（状态模式）：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"># State.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(state) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Context Class created"</span>);</span><br><span class="line">        <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">                <span class="keyword">this</span>.state = <span class="keyword">new</span> ConcreteStateA()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">                <span class="keyword">this</span>.state = <span class="keyword">new</span> ConcreteStateB()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">this</span>.state = <span class="keyword">new</span> ConcreteStateA()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.request invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.state.handle(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"State Class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handle() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'State.handle invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteStateA Class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handle(context) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStateA.handle invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteStateB Class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handle(context) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStateB.handle invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> context = <span class="keyword">new</span> Context(<span class="string">"A"</span>)</span><br><span class="line">context.request()</span><br></pre></td></tr></table></figure><ul><li>Strategy（策略模式）：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># Strategy.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(type) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context Class created!'</span>);</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">                <span class="keyword">this</span>.strategy = <span class="keyword">new</span> ConcreteStrategyA()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">                <span class="keyword">this</span>.strategy = <span class="keyword">new</span> ConcreteStrategyB()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">this</span>.strategy = <span class="keyword">new</span> ConcreteStrategyA()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    contextInterface() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.contextInterface invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.strategy.algorithmInterface()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Strategy Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    algorithmInterface() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Strategy.algorithmInterface invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStrategyA Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    algorithmInterface() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStrategyA.algorithmInterface invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStrategyB Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    algorithmInterface() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStrategyB.algorithmInterface invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> contextA = <span class="keyword">new</span> Context(<span class="string">"A"</span>);</span><br><span class="line">contextA.contextInterface();</span><br><span class="line"><span class="keyword">let</span> contextB = <span class="keyword">new</span> Context(<span class="string">"B"</span>);</span><br><span class="line">contextB.contextInterface();</span><br></pre></td></tr></table></figure><ul><li>Template Method（模板方法模式）：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># Template Method.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractClass Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    templateMethod() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractClass.templateMethod invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.primitiveOperation1();</span><br><span class="line">        <span class="keyword">this</span>.primitiveOperation2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    primitiveOperation1() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractClass.primitiveOperation1 invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    primitiveOperation2() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractClass.primitiveOperation2 invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteClass Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    primitiveOperation1() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteClass.primitiveOperation1 invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    primitiveOperation2() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteClass.primitiveOperation2 invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> ConcreteClass();</span><br><span class="line">obj.templateMethod();</span><br></pre></td></tr></table></figure><ul><li>Visitor（访问者模式）：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"># Visitor.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Visitor Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visitConcreteElementA(ConcreteElementA) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Visitor.visitConcreteElementA invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visitConcreteElementB(ConcreteElementB) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Visitor.visitConcreteElementB invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor1</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteVisitor1 Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visitConcreteElementA(ConcreteElementA) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteVisitor1.visitConcreteElementA invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visitConcreteElementB(ConcreteElementB) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteVisitor1.visitConcreteElementB invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor2</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteVisitor2 Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visitConcreteElementA(ConcreteElementA) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteVisitor2.visitConcreteElementA invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visitConcreteElementB(ConcreteElementB) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteVisitor2.visitConcreteElementB invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ObjectStructure Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Element Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Accept(visitor) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Element.visitConcreteElementB invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteElementA Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    accept(visitor) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteElementA.accept invoked'</span>);</span><br><span class="line">        visitor.visitConcreteElementA(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operationA() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteElementA.operationA invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementB</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteElementB Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    accept(visitor) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteElementB.accept invoked'</span>);</span><br><span class="line">        visitor.visitConcreteElementB(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operationB() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteElementB.operationB invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> visitor1 = <span class="keyword">new</span> ConcreteVisitor1();</span><br><span class="line"><span class="keyword">let</span> visitor2 = <span class="keyword">new</span> ConcreteVisitor2();</span><br><span class="line"><span class="keyword">let</span> elementA = <span class="keyword">new</span> ConcreteElementA();</span><br><span class="line"><span class="keyword">let</span> elementB = <span class="keyword">new</span> ConcreteElementB();</span><br><span class="line">elementA.accept(visitor1);</span><br><span class="line">elementB.accept(visitor2);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用ES6实现&quot;&gt;&lt;a href=&quot;#使用ES6实现&quot; class=&quot;headerlink&quot; title=&quot;使用ES6实现&quot;&gt;&lt;/a&gt;使用ES6实现&lt;/h3&gt;&lt;h5 id=&quot;设计模式分为三种类型，共23种&quot;&gt;&lt;a href=&quot;#设计模式分为三种类型，共23种&quot; c
      
    
    </summary>
    
      <category term="前端" scheme="https://llwanran.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="https://llwanran.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>PHP相关名词通俗解释</title>
    <link href="https://llwanran.github.io/posts/994796909.html"/>
    <id>https://llwanran.github.io/posts/994796909.html</id>
    <published>2018-01-16T05:31:00.000Z</published>
    <updated>2018-01-17T08:00:04.480Z</updated>
    
    <content type="html"><![CDATA[<h6 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h6><ul><li>CGI(Common Gateway Interface) 是为了保证web server传递过来的数据是标准格式的，方便CGI程序的编写者。</li><li>是个协议，跟进程什么的没关系。</li><li>可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。</li></ul><h6 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h6><ul><li>是用来提高CGI程序性能的。CGI程序反复加载是CGI性能低下的主要原因，如果CGI程序保持在内存中并接受FastCGI进程管理器调度，则可以提供良好的性能、伸缩性、Fail-Over特性等。</li><li>是常驻型的CGI，它可以一直运行，在请求到达时，不会花费时间去fork一个进程来处理。</li><li>是CGI的升级版，一种语言无关的协议，用来沟通程序(如PHP, Python, Java)和Web服务器(Apache2, Nginx), 理论上任何语言编写的程序都可以通过Fastcgi来提供Web服务。</li></ul><h6 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h6><ul><li>（FastCGI Process Manager）大家都知道，PHP的解释器是php-cgi。php-cgi只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理（皇上，臣妾真的做不到啊！）所以就出现了一些能够调度php-cgi进程的程序，比如说由lighthttpd分离出来的spawn-fcgi。好了PHP-FPM也是这么个东东，在长时间的发展后，逐渐得到了大家的认可（要知道，前几年大家可是抱怨PHP-FPM稳定性太差的），也越来越流行。</li><li>使用PHP-FPM来控制PHP-CGI的FastCGI进程。在没有PHP-FPM之前，是直接打开php-cgi.exe(win32)、php-cgi进程来处理fastcgi的请求的。或者是用spawn-fcgi或uwsgi类似的fastcgi进程管理软件。PHP-FPM的目的就是解决spawn-fcgi和uwsgi等类似管理器的缺陷，自php5.3以后版本开始被官方加入。</li></ul><h6 id="phpize"><a href="#phpize" class="headerlink" title="phpize"></a>phpize</h6><ul><li>是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块。</li><li>比如你想在原来编译好的php中加入memcached或者ImageMagick等扩展模块，可以使用phpize。</li></ul><h6 id="PECL"><a href="#PECL" class="headerlink" title="PECL"></a>PECL</h6><ul><li>PHP Extension Community Library，它管理着最底层的PHP扩展。这些扩展是用 C 写的。</li></ul><h6 id="PEAR"><a href="#PEAR" class="headerlink" title="PEAR"></a>PEAR</h6><ul><li>PHP Extension and Application Repository，它管理着项目环境的扩展。这些扩展是用 PHP 写的。</li></ul><h6 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h6><ul><li>PHP依赖管理的新时代</li><li>对于现代语言而言，包管理器基本上是标配。Java 有 Maven，Python 有 pip，Ruby 有 gem，Nodejs 有 npm。PHP 的则是 PEAR，不过 PEAR 坑不少：<blockquote><ol><li>依赖处理容易出问题</li><li>配置非常复杂</li><li>难用的命令行接口</li></ol></blockquote></li><li>好在我们有 Composer，PHP依赖管理的利器。它是开源的，使用起来也很简单，提交自己的包也很容易。</li></ul><h6 id="PSR"><a href="#PSR" class="headerlink" title="PSR"></a>PSR</h6><ul><li>PHP Standard Recommendations，由 PHP FIG 组织制定的 PHP 规范，是 PHP 开发的实践标准。</li><li>目前已表决通过了 6 套标准，已经得到大部分 PHP 框架的支持和认可。</li></ul><h6 id="SAPI"><a href="#SAPI" class="headerlink" title="SAPI"></a>SAPI</h6><ul><li>Server Application Programming Interface（服务端应用编程端口）</li><li>PHP通过SAPI提供了一组接口，供应用和PHP内核之间进行数据交互。</li></ul><h6 id="PHP-CLI"><a href="#PHP-CLI" class="headerlink" title="PHP CLI"></a>PHP CLI</h6><ul><li>从版本 4.3.0 开始，PHP 提供了一种新类型的 CLI SAPI支持，名为 CLI，意为 Command Line Interface，即命令行接口。</li><li>主要用作 PHP 的开发外壳应用。</li></ul><h6 id="影响-PHP-行为的扩展"><a href="#影响-PHP-行为的扩展" class="headerlink" title="影响 PHP 行为的扩展"></a>影响 PHP 行为的扩展</h6><ul><li><font color="red">APC</font> Alternative PHP Cache (可选 PHP 缓存)</li><li><font color="red">APCu</font> APC User Cache</li><li><font color="red">APD</font> Advanced PHP debugger</li><li><font color="red">bcompiler</font> PHP 字节码编译器</li><li><font color="red">BLENC</font> BLowfish ENCoder for PHP source scripts</li><li><font color="red">错误处理</font> 错误处理和日志记录</li><li><font color="red">htscanner</font> htaccess-like support for all SAPIs</li><li><font color="red">inclued</font> Inclusion hierarchy viewer</li><li><font color="red">Memtrack</font> 简单监视内存使用情况</li><li><font color="red">OPcache</font> 性能加速</li><li><font color="red">输出控制</font> 输出缓冲控制</li><li><font color="red">PHP 选项/信息</font></li><li><font color="red">runkit</font> official PECL PHP Runkit extension</li><li><font color="red">scream</font> Break the silence operator</li><li><font color="red">uopz</font> User Operations for Zend</li><li><font color="red">Weakref</font> Weak References</li><li><font color="red">WinCache</font> Windows Cache for PHP</li><li><font color="red">Xhprof</font> 层次式性能分析器</li></ul><hr><h3 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h3><p><strong>PHP Version 7.1.13</strong> - phpinfo() Configuration</p><ul><li>BCMath 任意精度数学[数学扩展]</li><li>Bzip2 用于透明地读写 bzip2（.bz2）压缩文件[压缩与归档扩展]</li><li>Calendar [日期与时间相关扩展]</li><li>Ctype 字符类型检测[变量与类型相关扩展]</li><li>cURL Client URL 库[其它服务]</li><li>DBA Database (dbm-style) Abstraction Layer[数据库抽象层]</li><li>DOM Document Object Model[XML 操作]</li><li>EXIF 可交换图像信息[图像生成和处理]</li><li>Fileinfo 文件信息[文件系统相关扩展]</li><li>Filter Data Filtering[变量与类型相关扩展]</li><li>FTP 实现了通过 FTP 协议访问文件服务器的客户端[FTP]</li><li>GD 图像处理[GD]</li><li>Gettext 实现了NLS (Native Language Support) API，他可以用来国际化您的PHP程序[国际化与字符编码支持]</li><li>Hash 哈希信息摘要框架[加密扩展]</li><li>iconv 字符集转换[国际化与字符编码支持]</li><li>Json JavaScript对象符号[其它基本扩展]</li><li>LDAP Lightweight Directory Access Protocol[其它服务]</li><li>libxml [XML 操作]</li><li>mbstring 多字节字符串[国际化与字符编码支持]</li><li>MySQLi MySQL增强版扩展[MySQL]</li><li>Mysqlnd MySQL Native Driver[MySQL]</li><li>ODBC [数据库抽象层]</li><li>OpenSSL 对称/非对称加解密，以及 PBKDF2、 PKCS7、 PKCS12、 X509 和其他加密操作[加密扩展]</li><li>PCNTL 进程控制[进程控制扩展]</li><li>PCRE 正则表达式(兼容 Perl)[文本处理]</li><li>PDO PHP 数据对象[数据库抽象层]</li><li>PDO_MYSQL MySQL Functions[PDO 驱动]</li><li>PDO_ODBC ODBC and DB2 Functions[PDO 驱动]</li><li>PDO_SQLITE SQLite Functions[PDO 驱动]</li><li>Phar [压缩与归档扩展]</li><li>POSIX [进程控制扩展]</li><li>Readline 实现了访问 GNU Readline 库的接口[针对命令行的扩展]</li><li>Reflection 反射[变量与类型相关扩展]</li><li>Session <ul><li>Session Handling[Session 扩展]</li></ul></li><li>shmop Shared Memory[进程控制扩展]</li><li>SimpleXML [XML 操作]</li><li>SOAP [Web 服务]</li><li>Sockets [其它服务]</li><li>SPL PHP标准库 (SPL)[其它基本扩展]</li><li>SQLite3 [针对各数据库系统对应的扩展]</li><li>Streams 流[其它基本扩展]</li><li>在PHP中有这么一族函数，他们是对UNIX的V IPC函数族的包装<ul><li>sysvmsg</li><li>sysvsem</li><li>sysvshm 内存共享方案</li></ul></li><li>Tokenizer [其它基本扩展]</li><li>WDDX [XML 操作]</li><li>XML<ul><li>XML 解析器[XML 操作]</li></ul></li><li>XMLReader [XML 操作]</li><li>XML-RPC [Web 服务]</li><li>XMLWriter [XML 操作]</li><li>XSL [XML 操作]</li><li>Zip [压缩与归档扩展]</li><li>Zlib<ul><li>Zlib Compression [压缩与归档扩展]</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;CGI&quot;&gt;&lt;a href=&quot;#CGI&quot; class=&quot;headerlink&quot; title=&quot;CGI&quot;&gt;&lt;/a&gt;CGI&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;CGI(Common Gateway Interface) 是为了保证web server传递过来的数据是标准格式的，方
      
    
    </summary>
    
      <category term="PHP" scheme="https://llwanran.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://llwanran.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>浅析Memcached, Redis, MongoDB三者的区别</title>
    <link href="https://llwanran.github.io/posts/3063279979.html"/>
    <id>https://llwanran.github.io/posts/3063279979.html</id>
    <published>2018-01-15T01:50:00.000Z</published>
    <updated>2018-01-15T06:11:26.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p><ul><li><a href="http://www.redis.cn/commands.html" target="_blank">查看Redis中文命令大全</a></li><li>Redis 负载监控——<a href="https://github.com/NetEaseGame/redis-monitor" target="_blank">redis-monitor</a>，一个 web 可视化的 redis 监控程序。</li><li>Redis 集群迁移工具 <a href="https://github.com/vipshop/redis-migrate-tool" target="_blank">Redis-Migrate-Tool</a>，基于redis复制，快速，稳定。</li><li><a href="https://www.jianshu.com/p/be32f8b681cd" target="_blank">优酷土豆的Redis服务平台化之路</a></li><li><a href="https://www.jianshu.com/p/ee2aa7fe341b" target="_blank">Redis中国用户组|唯品会Redis cluster大规模生产实践</a></li></ul><p><strong><font color="green">Redis的优点：</font></strong></p><blockquote><ol><li>支持多种数据结构，如 string（字符串）、 list(双向链表)、dict(hash表)、set(集合）、zset(排序set)、hyperloglog（基数估算）。</li><li>支持持久化操作，可以进行aof及rdb数据持久化到磁盘，从而进行数据备份或数据恢复等操作，较好的防止数据丢失的手段。</li><li>支持通过Replication进行数据复制，通过master-slave机制，可以实时进行数据的同步复制，支持多级复制和增量复制，master-slave机制是Redis进行HA的重要手段。</li><li>单线程请求，所有命令串行执行，并发情况下不需要考虑数据一致性问题。</li><li>支持pub/sub消息订阅机制，可以用来进行消息订阅与通知。</li><li>支持简单的事务需求，但业界使用场景很少，并不成熟。</li></ol></blockquote><p><strong><font color="red">Redis的局限性：</font></strong></p><blockquote><ol><li>Redis只能使用单线程，性能受限于CPU性能，故单实例CPU最高才可能达到5-6wQPS每秒（取决于数据结构，数据大小以及服务器硬件性能，日常环境中QPS高峰大约在1-2w左右）。<br>支持简单的事务需求，但业界使用场景很少，并不成熟，既是优点也是缺点。</li><li>Redis在string类型上会消耗较多内存，可以使用dict（hash表）压缩存储以降低内存耗用。</li><li>Mc和Redis都是Key-Value类型，不适合在不同数据集之间建立关系，也不适合进行查询搜索。比如redis的keys pattern这种匹配操作，对redis的性能是灾难。</li></ol></blockquote><p><img src="/images/pasted-2.png" alt="upload successful"></p><h3 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h3><p>是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态、数据库驱动网站的速度。Memcached基于一个存储键/值对的hashmap。其守护进程（daemon ）是用C写的，但是客户端可以用任何语言来编写，并通过memcached协议与守护进程通信。</p><p><strong><font color="green">Memcached的优点：</font></strong></p><blockquote><ol><li>Memcached可以利用多核优势，单实例吞吐量极高，可以达到几十万QPS（取决于key、value的字节大小以及服务器硬件性能，日常环境中QPS高峰大约在4-6w左右）。适用于最大程度扛量。</li><li>支持直接配置为session handle。</li></ol></blockquote><p><strong><font color="red">Memcached的局限性：</font></strong></p><blockquote><ol><li>只支持简单的key/value数据结构，不像Redis可以支持丰富的数据类型。</li><li>无法进行持久化，数据不能备份，只能用于缓存使用，且重启后数据全部丢失。</li><li>无法进行数据同步，不能将MC中的数据迁移到其他MC实例中。</li><li>Memcached内存分配采用Slab Allocation机制管理内存，value大小分布差异较大时会造成内存利用率降低，并引发低利用率时依然出现踢出等问题。需要用户注重value设计。</li></ol></blockquote><p><img src="/images/pasted-1.png" alt="upload successful"></p><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p>是一个基于分布式文件存储的数据库，文档型的非关系型数据库，与上面两者不同。</p><p>先解释一下文档的数据库，即可以存放xml、json、bson类型系那个的数据。</p><p>这些数据具备自述性（self-describing），呈现分层的树状数据结构。redis可以用hash存放简单关系型数据。</p><p>MongoDB存放json格式数据。</p><p>适合场景：事件记录、内容管理或者博客平台，比如评论系统。</p><p><img src="/images/pasted-3.png" alt="upload successful"></p><hr><h6 id="Redis与Memcached的比较"><a href="#Redis与Memcached的比较" class="headerlink" title="Redis与Memcached的比较"></a>Redis与Memcached的比较</h6><blockquote><p>1、<strong>数据类型支持不同</strong></p></blockquote><p>与Memcached仅支持简单的key-value结构的数据记录不同，Redis支持的数据类型要丰富得多。最为常用的数据类型主要由五种：String、Hash、List、Set和Sorted Set。Redis内部使用一个redisObject对象来表示所有的key和value。</p><blockquote><p>2、<strong>内存管理机制不同</strong></p></blockquote><p>在Redis中，并不是所有的数据都一直存储在内存中的。这是和Memcached相比一个最大的区别。</p><p>当物理内存用完时，Redis可以将一些很久没用到的value交换到磁盘。Redis只会缓存所有的key的信息，如果Redis发现内存的使用量超过了某一个阀值，将触发swap的操作，Redis根据“swappability = age*log(size_in_memory)”计算出哪些key对应的value需要swap到磁盘。然后再将这些key对应的value持久化到磁盘中，同时在内存中清除。</p><p>这种特性使得Redis可以保持超过其机器本身内存大小的数据。当然，机器本身的内存必须要能够保持所有的key，毕竟这些数据是不会进行swap操作的。同时由于Redis将内存中的数据swap到磁盘中的时候，提供服务的主线程和进行swap操作的子线程会共享这部分内存，所以如果更新需要swap的数据，Redis将阻塞这个操作，直到子线程完成swap操作后才可以进行修改。</p><p>当从Redis中读取数据的时候，如果读取的key对应的value不在内存中，那么Redis就需要从swap文件中加载相应数据，然后再返回给请求方。 这里就存在一个I/O线程池的问题。在默认的情况下，Redis会出现阻塞，即完成所有的swap文件加载后才会相应。这种策略在客户端的数量较小，进行批量操作的时候比较合适。但是如果将Redis应用在一个大型的网站应用程序中，这显然是无法满足大并发的情况的。所以Redis运行我们设置I/O线程池的大小，对需要从swap文件中加载相应数据的读取请求进行并发操作，减少阻塞的时间。</p><blockquote><p>3、<strong>数据持久化支持</strong></p></blockquote><p>Redis虽然是基于内存的存储系统，但是它本身是支持内存数据的持久化的，而且提供两种主要的持久化策略：RDB快照和AOF日志。而memcached是不支持数据持久化操作的。</p><blockquote><p>4、<strong>集群管理的不同</strong></p></blockquote><p>Memcached是全内存的数据缓冲系统，Redis虽然支持数据的持久化，但是全内存毕竟才是其高性能的本质。作为基于内存的存储系统来说，机器物理内存的大小就是系统能够容纳的最大数据量。如果需要处理的数据量超过了单台机器的物理内存大小，就需要构建分布式集群来扩展存储能力。</p><p><font color="red">Memcached本身并不支持分布式</font>，因此只能在客户端通过像一致性哈希这样的分布式算法来实现Memcached的分布式存储。</p><p><strong>结论</strong></p><ul><li><font color="red">没有必要过多的关心性能，因为二者的性能都已经足够高了。</font>由于Redis只使用单核，而Memcached可以使用多核，所以在比较上，平均每一个核上Redis在存储小数据时比Memcached性能更高。而在100k以上的数据中，Memcached性能要高于Redis，虽然Redis最近也在存储大数据的性能上进行优化，但是比起Memcached，还是稍有逊色。说了这么多，结论是，无论你使用哪一个，每秒处理请求的次数都不会成为瓶颈。（比如瓶颈可能会在网卡）</li><li>如果要说内存使用效率，使用简单的key-value存储的话，Memcached的内存利用率更高，而如果Redis采用hash结构来做key-value存储，由于其组合式的压缩，其内存利用率会高于Memcached。当然，这和你的应用场景和数据特性有关。</li><li>如果你对数据持久化和数据同步有所要求，那么推荐你选择Redis，因为这两个特性Memcached都不具备。即使你只是希望在升级或者重启系统后缓存数据不会丢失，选择Redis也是明智的。</li><li>当然，最后还得说到你的具体应用需求。Redis相比Memcached来说，拥有更多的数据结构和并支持更丰富的数据操作，通常在Memcached里，你需要将数据拿到客户端来进行类似的修改再set回去。这大大增加了网络IO的次数和数据体积。在Redis中，这些复杂的操作通常和一般的GET/SET一样高效。所以，如果你需要缓存能够支持更复杂的结构和操作，那么Redis会是不错的选择。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h3&gt;&lt;p&gt;是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构
      
    
    </summary>
    
    
      <category term="nosql" scheme="https://llwanran.github.io/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>javascript中模块的发展历程</title>
    <link href="https://llwanran.github.io/posts/1099660432.html"/>
    <id>https://llwanran.github.io/posts/1099660432.html</id>
    <published>2018-01-06T09:29:00.000Z</published>
    <updated>2018-01-15T06:46:04.836Z</updated>
    
    <content type="html"><![CDATA[<h6 id="一、模块的重要性"><a href="#一、模块的重要性" class="headerlink" title="一、模块的重要性"></a>一、模块的重要性</h6><p>Javascript不是一种模块化编程语言，它不支持”类”（class），更别说”模块”（module）了。<br>开发者们做了很多努力，在现有的运行环境中，实现”模块”的效果。</p><h6 id="没有模块的日子里"><a href="#没有模块的日子里" class="headerlink" title="没有模块的日子里"></a>没有模块的日子里</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>后果：</p><p>全局变量的灾难；<br>函数命名冲突；<br>依赖关系不好管理。</p><h6 id="js模块的前身（为了解决以上问题）"><a href="#js模块的前身（为了解决以上问题）" class="headerlink" title="js模块的前身（为了解决以上问题）"></a>js模块的前身（为了解决以上问题）</h6><p><strong>1. 面对对象的写法：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a:<span class="number">1</span>,</span><br><span class="line">b:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>优点：<br>1、解决了变量污染的问题；<br>2、保证模块名唯一即可，建立同一模块内的成员的关系。<br>缺点：<br>1、暴露所有模块成员，内部状态可以被外部任意改写。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.a =<span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><p><strong>2. 匿名自执行函数：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">a:<span class="number">1</span>,</span><br><span class="line">b:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>优点：<br>1、解决暴露所有模块成员，内部状态可以被外部任意改写的问题。<br>缺点：<br>1、所需依赖还是得外部提前提供。</p><h6 id="二、commonJS"><a href="#二、commonJS" class="headerlink" title="二、commonJS"></a>二、commonJS</h6><p>2009年，对js是历史性的一年，nodeJS横空出世，让js跑在服务端，如果说js在浏览器上面可以没有模块，但是在服务端没有模块的思想是万万不能容忍的。<br>由Mozilla 的工程师 Kevin Dangoor 在2009年1月创建了commonJS规范。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建模块 one.js</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'aaaa'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">a: a,</span><br><span class="line">b: b</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//加载模块 two.js</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="built_in">require</span>(<span class="string">'./one.js'</span>);</span><br><span class="line">x.b();</span><br></pre></td></tr></table></figure></p><p>优点：<br>1、所有代码都运行在模块作用域，不会污染全局作用域；<br>2、独立性是模块的重要特点就，模块内部最好不与程序的其他部分直接交互；<br>3、模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存；<br>4、模块加载的顺序，按照其在代码中出现的顺序。<br>node推广了commonJS规范，但是在浏览器中又出现了很多问题<br>问题：<br>浏览器资源的加载方式与服务端完全不同。服务端require一个模块，直接就从硬盘或者内存中读取了，消耗的时间可以忽略。而浏览器则不同，需要从服务端来下载这个文件，然后运行里面的代码才能得到API，需要花费一个http请求，也就是说，require后面的一行代码，需要资源请求完成才能执行。<br>由于浏览器端是以插入script标签的形式来加载资源的（ajax方式不行，有跨域问题）没办法让代码同步执行，所以像commonjs那样的写法会直接报错。<br>这意味着要想适应浏览器，规范还要改进！！！<br>一个<a href="http://wiki.commonjs.org/wiki/Modules/Wrappings" target="_blank">Modules/Wrappings</a>规范出现了。</p><h6 id="三、AMD"><a href="#三、AMD" class="headerlink" title="三、AMD"></a>三、AMD</h6><p>经过一番谈论、修改（过程忽略），AMD思想出现了…<br>AMD（Asynchronous Module Definition）：</p><ul><li>异步模块定义规范制定了定义模块的规则，这样模块和模块的依赖可以被异步加载。这和浏览器的异步加载模块的环境刚好适应（浏览器同步加载模块会导致性能、可用性、调试和跨域访问等问题）。</li><li>依赖前置，预执行（异步加载：依赖先执行，依赖必须一开始就写好，会先尽早地执行(依赖)模块 。换句话说，所有的require都被提前执行（require 可以是全局或局部 ）。</li><li>相关Api(简单实例):<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义和暴露模块</span></span><br><span class="line">define(<span class="string">"xxx"</span>, [<span class="string">"xxx"</span>, <span class="string">"xxx"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">x, x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ... ;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//加载模块</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">"xxx"</span>, <span class="string">"../xxx"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">xxx, xxx</span>) </span>&#123;</span><br><span class="line">xxxx</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>具体Api请参见：<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank">AMD (中文版)</a></p><hr><p><strong>RequireJS</strong><br>说完AMD,就不得不提把AMD在浏览器实现的RequireJS。<br>RequireJS是一个JavaScript文件和模块加载器,采用AMD规范。<br>参考文件：<a href="http://requirejs.org/docs/start.html" target="_blank">RequireJS</a></p><h6 id="三、CMD"><a href="#三、CMD" class="headerlink" title="三、CMD"></a>三、CMD</h6><p>CMD（Common Module Definition）:</p><ul><li>CMD更贴近 CommonJS Modules/1.1 和 Node Modules 规范，一个模块就是一个文件；</li><li>它推崇依赖就近，想什么时候 require 就什么时候加载，实现了懒加载（延迟执行 ）；</li><li>它也没有全局 require， 每个API都简单纯粹；</li><li>不过RequireJS从2.0开始，也改成可以延迟执行。</li><li>相关Api(简单实例):<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义和暴露模块</span></span><br><span class="line">define(<span class="string">'xxx'</span>, [<span class="string">'xxx'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">xxx, xxx, xxx</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ... ;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//加载模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports</span>) </span>&#123; </span><br><span class="line"><span class="comment">// 获取模块 a 的接口</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>); </span><br><span class="line"><span class="comment">// 调用模块 a 的方法</span></span><br><span class="line">a.doSomething(); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>seaJS</strong></p><ul><li>SeaJS遵循的CMD,将CMD在浏览器中实现；</li><li>SeaJS 是一个模块加载器;</li><li>借鉴了 RequireJS 的不少东西</li></ul><p><a href="http://www.zhangxinxu.com/sp/seajs/" target="_blank">seajs官网</a></p><p><strong>其他</strong></p><p><strong>UMD</strong></p><p>既然CommonJs和AMD风格一样流行，似乎缺少一个统一的规范。所以人们产生了这样的需求，希望有支持两种风格的“通用”模式，于是通用模块规范（UMD）诞生了。</p><p><strong>es6 modules</strong></p><ul><li>ES6自带了模块化， 也是JS第一次支持module；</li></ul><p><strong>后记</strong></p><p>本文主要记述模块的思想在浏览器的实现过程，不是一篇详细的Api教程。</p><blockquote><p>来源：<a href="http://blog.sooyoung.cn/2017/12/01/module/#more" target="_blank" rel="noopener">http://blog.sooyoung.cn/2017/12/01/module/#more</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;一、模块的重要性&quot;&gt;&lt;a href=&quot;#一、模块的重要性&quot; class=&quot;headerlink&quot; title=&quot;一、模块的重要性&quot;&gt;&lt;/a&gt;一、模块的重要性&lt;/h6&gt;&lt;p&gt;Javascript不是一种模块化编程语言，它不支持”类”（class），更别说”模块”（m
      
    
    </summary>
    
      <category term="前端" scheme="https://llwanran.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="模块" scheme="https://llwanran.github.io/tags/%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
</feed>
