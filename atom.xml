<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>婉然一笑 - Li的兰花指</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://llwanran.github.io/"/>
  <updated>2018-07-11T05:37:27.949Z</updated>
  <id>https://llwanran.github.io/</id>
  
  <author>
    <name>LLwanran</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何优雅的选择字体(font-family)</title>
    <link href="https://llwanran.github.io/posts/663360563.html"/>
    <id>https://llwanran.github.io/posts/663360563.html</id>
    <published>2018-07-11T04:59:00.000Z</published>
    <updated>2018-07-11T05:37:27.949Z</updated>
    
    <content type="html"><![CDATA[<p>大家都知道，在不同操作系统、不同游览器里面默认显示的字体是不一样的，并且相同字体在不同操作系统里面渲染的效果也不尽相同，那么如何设置字体显示效果会比较好呢？下面我们逐步的分析一下：</p><h4 id="一、首先我们看看各平台的默认字体情况"><a href="#一、首先我们看看各平台的默认字体情况" class="headerlink" title="一、首先我们看看各平台的默认字体情况"></a>一、首先我们看看各平台的默认字体情况</h4><h6 id="1、Window下："><a href="#1、Window下：" class="headerlink" title="1、Window下："></a>1、Window下：</h6><ul><li><strong>宋体（SimSun）</strong>：Win下大部分游览器的默认字体，宋体在小字号下（如12px、14px）的显示效果还可以接受，但是字号一大就非常糟糕了，所以使用的时候要注意。</li><li><strong>微软雅黑（”Microsoft Yahei”）</strong>：从 Vista 开始，微软提供了这款新的字体，一款无衬线的黑体类字体，并且拥有 Regular、Bold 两种粗细的字重，显著提高了字体的显示效果。现在这款字体已经成为Windows游览器中最值得使用的中文字体。从Win8开始，微软雅黑又加入了 Light 这款更细的字重，对于喜欢细字体的设计、开发人员又多了一个新的选择。</li><li><strong>Arial</strong>：Win平台上默认的无衬线西文字体（为什么要说英文字体后面会解释），有多种变体，显示效果一般。</li><li><strong>Tahoma</strong>：十分常见的无衬线字体，被采用为Windows 2000、Windows XP、Windows Server 2003及Sega游戏主机Dreamcast等系统的预设字型，显示效果比<code>Arial</code>要好。</li><li><strong>Verdana</strong>：无衬线字体，优点在于它在小字上仍结构清晰端整、阅读辨识容易。</li><li>其他：Windows 下默认字体列表：<a href="https://www.microsoft.com/typography/fonts/product.aspx?pid=161" rel="nofollow noreferrer" target="_blank">微软官网</a>、<a href="https://en.wikipedia.org/wiki/List_of_typefaces_included_with_Microsoft_Windows" rel="nofollow noreferrer" target="_blank">维基百科</a>、<a href="https://support.office.com/zh-cn/article/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84-Office-%E6%8F%90%E4%BE%9B%E7%9A%84%E5%AD%97%E4%BD%93-db1101fc-5cc0-4300-91cd-de7c79d907cd?CorrelationId=e2918255-27c6-4f99-b24c-6789900e8cb2&amp;ui=zh-CN&amp;rs=zh-CN&amp;ad=CN&amp;ocmsassetID=HA010282644" rel="nofollow noreferrer" target="_blank">Office字体</a></li><li><strong>结论：<code>微软雅黑</code>为Win平台上最值得选择的中文字体，但非游览器默认，需要设置；西文字体的选择以<code>Arial</code>、<code>Tahoma</code>等无衬线字体为主。</strong></li></ul><h6 id="2、Mac-OS下："><a href="#2、Mac-OS下：" class="headerlink" title="2、Mac OS下："></a>2、Mac OS下：</h6><ul><li><strong>华文黑体（STHeiti）</strong>、<strong>华文细黑（STXihei）</strong>：属于同一字体家族系列，OS X 10.6 之前的简体中文系统界面默认字体，也是目前Chrome游览器下的默认字体，有 Regular 和 Bold 两个字重，显示效果可以接受，<code>华文细黑</code>也曾是我最喜欢的字体之一。</li><li><strong>黑体-简（Heiti SC）</strong>：从 10.6 开始，<code>黑体-简</code>代替<code>华文黑体</code>用作简体中文系统界面默认字体，苹果生态最常用的字体之一，包括iPhone、iPad等设备用的也是这款字体，显示效果不错，但是喇叭口设计遭人诟病。</li><li><strong>冬青黑体（ Hiragino Sans GB ）</strong>：听说又叫<code>苹果丽黑</code>，日文字体<code>Hiragino KakuGothic</code>的简体中文版，简体中文有 常规体 和 粗体 两种，<code>冬青黑体</code>是一款清新的专业印刷字体，小字号时足够清晰，拥有很多人的追捧。</li><li><strong>Times New Roman</strong>：Mac平台Safari下默认的字体，是最常见且广为人知的西文衬线字体之一，众多网页浏览器和文字处理软件都是用它作为默认字体。</li><li><strong>Helvetica、Helvetica Neue</strong>：一种被广泛使用的传奇般的西文字体（这货还有专门的记录片呢），在微软使用山寨货的<code>Arial</code>时，乔布斯却花费重金获得了<code>Helvetica</code>苹果系统上的使用权，因此该字体也一直伴随着苹果用户，是苹果生态中最常用的西文字体。<code>Helvetica Neue</code>为<code>Helvetica</code>的改善版本，且增加了更多不同粗细与宽度的字形，共拥有51种字体版本，极大的满足了日常的使用。</li><li><strong>苹方（PingFang SC）</strong>：在Mac OS X EL Capitan上，苹果为中国用户打造了一款全新中文字体–<code>苹方</code>，去掉了为人诟病的喇叭口，整体造型看上去更加简洁，字族共六枚字体：极细体、纤细体、细体、常规体、中黑体、中粗体。</li><li><strong>San Francisco</strong>：同样是Mac OS X EL Capitan上最新发布的西文字体，感觉和<code>Helvetica</code>看上去差别不大，目前已经应用在Mac OS 10.11+、iOS 9.0+、watch OS等最新系统上。</li><li><strong>其他</strong>：Mac下默认字体列表：<a href="https://support.apple.com/zh-cn/HT202408" rel="nofollow noreferrer" target="_blank">苹果官网</a>、<a href="https://en.wikipedia.org/wiki/List_of_typefaces_included_with_OS_X" rel="nofollow noreferrer" target="_blank">维基百科</a></li><li><strong>结论：目前<code>苹方</code>和<code>San Francisco</code>为苹果推出的最新字体，显示效果也最为优雅，但只有最新系统才能支持，而<code>黑体-简</code>和<code>Helvetica</code>可以获得更多系统版本支持，显示效果也相差无几，可以接受。</strong></li></ul><h6 id="3、Android系统："><a href="#3、Android系统：" class="headerlink" title="3、Android系统："></a>3、Android系统：</h6><ul><li><strong>Droid Sans、Droid Sans Fallback</strong>：<code>Droid Sans</code>为安卓系统中默认的西文字体，是一款人文主义无衬线字体，而<code>Droid Sans Fallback</code>则是包含汉字、日文假名、韩文的文字扩展支持。</li><li><strong>结论：<code>Droid Sans</code>为默认的字体，并结合了中英文，无需单独设置。</strong></li></ul><h6 id="4、iOS系统："><a href="#4、iOS系统：" class="headerlink" title="4、iOS系统："></a>4、iOS系统：</h6><ul><li><strong>iOS系统的字体和Mac OS系统的字体相同，保证了Mac上的字体效果，iOS设备就没有太大问题。</strong></li></ul><h6 id="5、Linux："><a href="#5、Linux：" class="headerlink" title="5、Linux："></a>5、Linux：</h6><ul><li><strong>文泉驿点阵宋体</strong>：类似<code>宋体</code>的衬线字体，一般不推荐使用。</li><li><strong>文泉驿微米黑</strong>：几乎是 Linux 社区现有的最佳简体中文字体。</li></ul><h4 id="二、选择字体需要注意的问题"><a href="#二、选择字体需要注意的问题" class="headerlink" title="二、选择字体需要注意的问题"></a>二、选择字体需要注意的问题</h4><h6 id="1、字体的中英文写法："><a href="#1、字体的中英文写法：" class="headerlink" title="1、字体的中英文写法："></a>1、字体的中英文写法：</h6><p>我们在操作系统中常常看到<code>宋体</code>、<code>微软雅黑</code>这样的字体名称，但实际上这只是字体的显示名称，而不是字体文件的名称，一般字体文件都是用英文命名的，如SimSun、Microsoft Yahei。在大多数情况下直接使用显示名称也能正确的显示，但是有一些用户的特殊设置会导致中文声明无效。<br><strong>因此，保守的做法是使用字体的字体名称（英文）或者两者兼写</strong>。如下示例：</p><pre><code>font-family: STXihei, "Microsoft YaHei";font-family: STXihei, "华文细黑", "Microsoft YaHei", "微软雅黑";</code></pre><h6 id="2、声明英文字体："><a href="#2、声明英文字体：" class="headerlink" title="2、声明英文字体："></a>2、声明英文字体：</h6><p>绝大部分中文字体里都包含英文字母和数字，不进行英文字体声明是没有问题的，但是大多数中文字体中的英文和数字的部分都不是特别漂亮，所以建议也对英文字体进行声明。</p><br><p><strong>由于英文字体中大多不包含中文，我们可以先进行英文字体的声明，这样不会影响到中文字体的选择，因此优先使用最优秀的英文字体，中文字体声明则紧随其次</strong>。如下示例：</p><p><br><pre><code>font-family: Arial, “Microsoft YaHei”;</code></pre><br><br>###### 3、照顾不同的操作系统：<br>- 英文、数字部分：在默认的操作系统中，Mac和Win都会带有<code>Arial</code>, <code>Verdana</code>, <code>Tahoma</code>等几个预装字体，从显示效果来看，<code>Tahoma</code>要比<code>Arial</code>更加清晰一些，因此字体设置<code>Tahoma</code>最好放到前面，当找不到<code>Tahoma</code>时再使用<code>Arial</code>；而在Mac中，还拥有一款更加漂亮的<code>Helvetica</code>字体，所以为了照顾Mac用户有更好的体验，应该更优先设置<code>Helvetica</code>字体；Android系统下默认的无衬线字体就可以接受，因此无需单独设置。<strong>最后，英文、数字字体的最佳写法如下：</strong><br><pre><code>font-family: Helvetica, Tahoma, Arial;</code></pre><br>- 中文部分：在Win下，<code>微软雅黑</code>为大部分人最常使用的中文字体，由于很多人安装Office的缘故，Mac电脑中也会出现微软雅黑字体，因此把显示效果不错的<code>微软雅黑</code>加入到字体列表是个不错的选择；同样，为了保证Mac中更为优雅字体<code>苹方（PingFang SC）</code>、<code>黑体-简（Heiti SC）</code>、<code>冬青黑体（ Hiragino Sans GB ）</code>的优先显示，需要把这些字体放到中文字体列表的最前面；同时为了照顾到Linux操作系统的体验，还需要添加文泉驿微米黑字体。<strong>最后，中文字体部分最佳写法如下：</strong><br><pre><code>font-family: “PingFang SC”, “Hiragino Sans GB”, “Heiti SC”, “Microsoft YaHei”, “WenQuanYi Micro Hei”;</code></pre><br></p><p><strong>中英文整合写法：</strong></p><br><pre><code>font-family: Helvetica, Tahoma, Arial, “Heiti SC”, “Microsoft YaHei”, “WenQuanYi Micro Hei”;<br>font-family: Helvetica, Tahoma, Arial, “PingFang SC”, “Hiragino Sans GB”, “Heiti SC”, “Microsoft YaHei”, “WenQuanYi Micro Hei”;</code></pre><br>- 4、注意向下兼容<br><p>如果还需要考虑旧版本操作系统用户的话，不得不加上一些旧版操作系统存在的字体：Mac中的<code>华文黑体</code>、<code>冬青黑体</code>，Win中的<code>黑体</code>等。<strong>同样按照显示效果排列在列表后面，写法如下：</strong></p><br><pre><code>font-family: Helvetica, Tahoma, Arial, “PingFang SC”, “Hiragino Sans GB”, “Heiti SC”, STXihei, “Microsoft YaHei”, SimHei, “WenQuanYi Micro Hei”;</code></pre><br>加入了 <code>STXihei（华文细黑）</code>和 <code>SimHei（黑体）</code>。<br>- 5、补充字体族名称<br><p>字体族大体上分为两类：<code>sans-serif（无衬线体）</code>和<code>serif（衬线体）</code>，当所有的字体都找不到时，我们可以使用字体族名称作为操作系统最后选择字体的方向。一般非衬线字体在显示器中的显示效果会比较好，<strong>因此我们需要在最后添加 <code>sans-serif</code>，写法如下：</strong></p><br><pre><code>font-family: Helvetica, Tahoma, Arial, “PingFang SC”, “Hiragino Sans GB”, “Heiti SC”, “Microsoft YaHei”, “WenQuanYi Micro Hei”, sans-serif;</code></pre><br><br>#### 三、我们看一下大公司的常见写法（2016.07查看）<br><p>1、小米</p><br><pre><code>font: 14px/1.5 “Helvetica Neue”,Helvetica,Arial,”Microsoft Yahei”,”Hiragino Sans GB”,”Heiti SC”,”WenQuanYi Micro Hei”,sans-serif;</code></pre><br><p>小米公司优先使用<code>Helvetica Neue</code>这款字体以保证最新版本Mac用户的最佳体验，选择了<code>Arial</code>作为Win下默认英文字体及Mac的替代英文字体；中文字体方面首选了<code>微软雅黑</code>，然后选择了<code>冬青黑体</code>及<code>黑体-简</code>作为Mac上的替代方案；最后使用<code>文泉驿微米黑</code>兼顾了Linux系统。</p><p>2、淘宝</p><br>鉴于淘宝网改版频率较频繁，这里截图保存了一下，<a href="http://oamfqhi9c.bkt.clouddn.com/blog_201607_taobao.jpg" rel="nofollow noreferrer" target="_blank">点此查看</a>。<br><pre><code>font: 12px/1.5 tahoma,arial,’Hiragino Sans GB’,’\5b8b\4f53’,sans-serif;</code></pre><br><p>其实从图中明显看出淘宝网的导航及内容有着大量的衬线字体，鉴于淘宝网站大部分字号比较小，显示效果也还可以接受。代码中可以看出淘宝使用了<code>Tahoma</code>、<code>Arial</code>作为首选英文字体，中文字体首选了<code>冬青黑体</code>，由于Win下没有预装该款字体，所以显示出了后面的宋体（<code>5b8b4f53</code>为汉字<code>宋体</code>用 unicode 表示的写法，不用<code>SimSun</code>是因为 Firefox 的某些版本和 Opera 不支持 <code>SimSun</code>的写法）</p><p>3、简书</p><br><pre><code>font-family: “lucida grande”, “lucida sans unicode”, lucida, helvetica, “Hiragino Sans GB”, “Microsoft YaHei”, “WenQuanYi Micro Hei”, sans-serif;</code></pre><br><p>自认为简书的阅读体验很棒，我们看看简书所用的字体，简书优先选择了<code>lucida</code>家族的系列字体作为英文字体，该系列字体在Mac和Win上都是预装的，并且有着不俗的表现；中文字体方面将<code>冬青黑体</code>作为最优先使用的字体，同样考虑了Linux系统。</p><br><p><em>各大公司的字体设置大同小异，这里不再一一举例查看，有兴趣的可以自己多多查看。</em></p><h4 id="四、其他的一些注意点"><a href="#四、其他的一些注意点" class="headerlink" title="四、其他的一些注意点"></a>四、其他的一些注意点</h4><p>1、字体何时需要添加引号</p><br>当字体具体某个取值中若有一种样式名称包含空格，则需要用双引号或单引号表示，如：<br><pre><code>font-family: “Microsoft YaHei”, “Arial Narrow”, sans-serif;</code></pre><br>如果书写中文字体名称为了保证兼容性也会添加引号，如：<br><pre><code>font-family: “黑体-简”, “微软雅黑”, “文泉驿微米黑”;</code></pre><br><br><p>2、引用外部字体</p><br><p>大多数的中文字体由于版权原因不能随意使用，这里推荐一个免版权而且漂亮的中文字体<code>思源黑体</code>，该字体为Adobe与Google推出的一款开源字体， 有七种字体粗细（ExtraLight、Light、Normal、Regular、Medium、Bold 和 Heavy），完全支持日文、韩文、繁体中文和简体中文，字形优美，依稀记得小米公司好像有使用过。</p><br><p>鉴于中文字体的体积比较大（一般字库全一点的中文字体动辄几Mb），所以较少人会使用外部字体，如果真的需要引入，也可以考虑通过工具根据页面文字的使用多少单独生成中文字体，以减小文件大小。</p><h4 id="五、最后，推荐写法"><a href="#五、最后，推荐写法" class="headerlink" title="五、最后，推荐写法"></a>五、最后，推荐写法</h4><p></p><p>由于每个人的审美不一样，钟爱的字体也会有所有不同，这里给出我个人的常用写法：</p><p></p><p><pre><code>font-family: “Helvetica Neue”, Helvetica, Arial, “PingFang SC”, “Hiragino Sans GB”, “Heiti SC”, “Microsoft YaHei”, “WenQuanYi Micro Hei”, sans-serif;</code></pre><br>另外推荐两个github上的关于中文字体和排版的项目：</p><ul><li><a href="https://github.com/zenozeng/fonts.css" rel="nofollow noreferrer" target="_blank">Fonts.css – 跨平台中文字体解决方案</a></li><li><a href="https://github.com/sofish/typo.css" rel="nofollow noreferrer" target="_blank">typo.css – 中文网页重设与排版：一致化浏览器排版效果</a></li></ul><h6 id="–参考资料"><a href="#–参考资料" class="headerlink" title="–参考资料"></a>–参考资料</h6><ul><li><a href="https://www.zhihu.com/question/19911793" rel="nofollow noreferrer" target="_blank">如何保证网页的字体在各平台都尽量显示为最高质量的黑体？</a></li><li><a href="http://ruby-china.org/topics/14005" rel="nofollow noreferrer" target="_blank">Web 中文字体应用指南</a></li><li><a href="http://www.keleyi.com/a/bjac/avaf0haa.htm" rel="nofollow noreferrer" target="_blank">“5b8b4f53”的意思</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大家都知道，在不同操作系统、不同游览器里面默认显示的字体是不一样的，并且相同字体在不同操作系统里面渲染的效果也不尽相同，那么如何设置字体显示效果会比较好呢？下面我们逐步的分析一下：&lt;/p&gt;
&lt;h4 id=&quot;一、首先我们看看各平台的默认字体情况&quot;&gt;&lt;a href=&quot;#一、首先
      
    
    </summary>
    
      <category term="前端" scheme="https://llwanran.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="https://llwanran.github.io/tags/html/"/>
    
      <category term="css" scheme="https://llwanran.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Webpack之配置说明</title>
    <link href="https://llwanran.github.io/posts/2439514917.html"/>
    <id>https://llwanran.github.io/posts/2439514917.html</id>
    <published>2018-02-01T06:52:00.000Z</published>
    <updated>2018-02-01T07:02:07.760Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote><br>  <p>webpack 通过一个配置对象来操作. 有两种方式来传递这个对象:</p><br></blockquote></p><p></p><h3 id="CLI"><br>  <a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><p></p><p>如果你使用<br>  <a href="docs/cli.md">CLI</a> ，webpack 会默认读取<code>webpack.config.js</code>（或者通过 <code>–config</code> 选项指向读取文件），该文件需要导出一个配置对象。<br>  <br> </p><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><br>          <td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    <span class="comment">// configuration</span></span><br><span class="line">};</span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><p></p><br><h3 id="node-js-API"><br>  <a href="#node-js-API" class="headerlink" title="node.js API"></a>node.js API</h3><br><p>如果使用<br>  <a href="docs/node.js-api.md">node.js API</a> 需要将配置对象当作参数传递:</p><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><br>          <td class="code"><pre><span class="line">webpack({</span><br><span class="line">    <span class="comment">// configuration</span></span><br><span class="line">}, callback);</span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><h3 id="多个配置对象"><br>  <a href="#多个配置对象" class="headerlink" title="多个配置对象"></a><br>  <a href="#multiple-configurations"></a>多个配置对象</h3><br><p>在这两种方法里面，你都可以使用一个配置对象数组来并行的执行。<br>  <br>他们共享数据缓存，和监听器，这样比多次执行webpack效率更高。</p><br><h1 id="配置对象内容"><br>  <a href="#配置对象内容" class="headerlink" title="配置对象内容"></a>配置对象内容</h1><br><blockquote><br>  <p>提示: 记住不要拘泥于在配置对象里面写纯json对象，可以使用你想使用的任何js方法，他仅仅是一个nodejs模块罢了。</p><br></blockquote><br><p>简单的例子:</p><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><br>          <td class="code"><pre><span class="line">{</span><br><span class="line">    context: <strong>dirname + <span class="string">“/app”</span>,</strong></span><br><span class="line">    entry: <span class="string">“./entry”</span>,</span><br><span class="line">    output: {</span><br><span class="line">        path: dirname + <span class="string">“/dist”</span>,</span><br><span class="line">        filename: <span class="string">“bundle.js”</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><h2 id="context"><br>  <a href="#context" class="headerlink" title="context"></a><code>context</code></h2><br><p>用于解析<code>entry</code>选项的基础目录(绝对路径), 如果output.pathinfo设置了，就包含了缩短过的目录；（相当于公共目录，下面所有的目录都在这个公共目录下面)</p><br><blockquote><br>  <p>默认: <code>process.cwd()</code></p><br></blockquote><br><h2 id="entry"><br>  <a href="#entry" class="headerlink" title="entry"></a><code>entry</code></h2><br><p>bundle的入口点。</p><br><ul><br>  <li>如果传入一个字符串，这个字符串就会被解析为启动时加载的模块。</li><br>  <li><br>    <p>如果传入个数组，所有模块都是启动时加载，模块导出到最后一个里面。</p><br>    <figure class="highlight javascript"><br>      <div class="table-responsive"><br>        <table class="table"><br>          <tbody><br>            <tr><br>              <td class="gutter"><pre><span class="line">1</span><br></pre></td><br>              <td class="code"><pre><span class="line">entry: [<span class="string">“./entry1”</span>, <span class="string">“./entry2”</span>]</span><br></pre></td><br>            </tr><br>          </tbody><br>        </table><br>      </div><br>    </figure><br>  </li><br>  <li><br>    <p>如果传入一个对象，就会创建多个输入包文件，对象键值就chunk的name，值可以是字符串或者是数组。</p><br>    <figure class="highlight javascript"><br>      <div class="table-responsive"><br>        <table class="table"><br>          <tbody><br>            <tr><br>              <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><br>              <td class="code"><pre><span class="line">{</span><br><span class="line">    entry: {</span><br><span class="line">        page1: <span class="string">“./page1”</span>,</span><br><span class="line">        page2: [<span class="string">“./entry1”</span>, <span class="string">“./entry2”</span>]</span><br><span class="line">    },</span><br><span class="line">    output: {</span><br><span class="line">        <span class="comment">// 当使用多入口文件时候，要确保在output.filename使用[name]或者[id]</span></span><br><span class="line">        filename: <span class="string">“[name].bundle.js”</span>,</span><br><span class="line">        chunkFilename: <span class="string">“[id].bundle.js”</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td><br>            </tr><br>          </tbody><br>        </table><br>      </div><br>    </figure><br>  </li><br></ul><br><blockquote><br>  <p><strong>注意</strong>: 没有别的专门来配置入口点的选项。如果你需要一个专门来配置入口点的配置对象，你需要用到<br>    <a href="#multiple-configurations">多个配置对象</a>.</p><br></blockquote><br><h2 id="output"><br>  <a href="#output" class="headerlink" title="output"></a><code>output</code></h2><br><p> output是影响编译输出的选项。output选项告诉webpack怎么把编译文件写入磁盘。注意，虽然可以有很多输入口，但是只有一个输出配置</p><br><p>如果使用了哈希(<code>[hash]</code> 或者 <code>[chunkhash]</code>), 需要确保有一个一致的模块顺序。使用OccurenceOrderPlugin插件或者 recordsPath。(译者：参看<br>  <a href="https://github.com/webpack/webpack/issues/950" target="_blank" rel="external">这个issue</a>)</p><br><h3 id="output-filename"><br>  <a href="#output-filename" class="headerlink" title="output.filename"></a><code>output.filename</code></h3><br><p>指定输出到硬盘的文件的的文件名。这里<strong>不能</strong>是一个绝对的路径！<code>output.path</code>会确定该文件的存在硬盘额路径的。<code>filename</code>仅仅用来给每个文件命名而已。</p><br><p><strong>单一入口</strong><br>  <br> </p><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><br>          <td class="code"><pre><span class="line">{</span><br><span class="line">  entry: <span class="string">‘./src/app.js’</span>,</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">‘bundle.js’</span>,</span><br><span class="line">    path: <span class="string">‘./built’</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入磁盘: ./built/bundle.js</span></span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><p></p><br><p><strong>多入口</strong></p><br><p>如果你的配置创建了多于一个的”chunk”(也就是带有多个入口点，或者使用了CommonsChunkPlugin这样的插件)，你应该使用替换符来为每个文件命名一个为一个名字。</p><br><p><code>[name]</code>被chunk的名字替换.</p><br><p><code>[hash]</code>被编译器hash替换.</p><br><p><code>[chunkhash]</code> 被chunk的hash替换.</p><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><br>          <td class="code"><pre><span class="line">{</span><br><span class="line">  entry: {</span><br><span class="line">    app: <span class="string">‘./src/app.js’</span>,</span><br><span class="line">    search: <span class="string">‘./src/search.js’</span></span><br><span class="line">  },</span><br><span class="line">  output: {</span><br><span class="line">    filename: <span class="string">‘[name].js’</span>,</span><br><span class="line">    path: <strong>dirname + <span class="string">‘/built’</span></strong></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 谢如磁盘: ./built/app.js, ./built/search.js</span></span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><h3 id="output-path"><br>  <a href="#output-path" class="headerlink" title="output.path"></a><code>output.path</code></h3><br><p><strong>绝对路径</strong> (required).</p><br><p><code>[hash]</code> 被编译后文件hash替换.</p><br><h3 id="output-publicPath"><br>  <a href="#output-publicPath" class="headerlink" title="output.publicPath"></a><code>output.publicPath</code></h3><br><p><code>publicPath</code>指定了一个在浏览器中被引用的URL地址。<br>  <br>对于使用<code>&lt;script&gt;</code> 和 <code>&lt;link&gt;</code>加载器，当文件路径不同于他们的本地磁盘路径（由<code>path</code>指定）时候<code>publicPath</code>被用来作为<code>href</code>或者<code>url</code>指向该文件。这种做法在你需要将静态文件放在不同的域名或者CDN上面的时候是很有用的。 Webpack Dev Server 也是用这个方式来读取文件的。与<code>path</code>搭配使用上<code>[hash]</code>就可以做好缓存方案了。</p><br><p><strong>config.js</strong></p><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><br>          <td class="code"><pre><span class="line">output: {</span><br><span class="line">    path: <span class="string">“/home/proj/public/assets”</span>,</span><br><span class="line">    publicPath: <span class="string">“/assets/“</span></span><br><span class="line">}</span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><p><strong>index.html</strong><br>  <br> </p><br><figure class="highlight html"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><br>          <td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">“/assets/spinner.gif”</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><p></p><br><p>使用CDN 和 hash的例子.</p><br><p><strong>config.js</strong><br>  <br> </p><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><br>          <td class="code"><pre><span class="line"></span><br><span class="line">output: {</span><br><span class="line">    path: <span class="string">“/home/proj/cdn/assets/[hash]”</span>,</span><br><span class="line">    publicPath: <span class="string">“<a href="http://cdn.example.com/assets/[hash]/" target="_blank" rel="noopener">http://cdn.example.com/assets/[hash]/</a>“</span></span><br><span class="line">}</span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><p></p><br><p><strong>注:</strong> 万一最终输出文件的<code>publicPath</code>在编译的时候不知道，那么你可以不填，动态的在运行时添加也可以。如果在编译过程你不知道<code>publicPath</code>你可以忽略他，然后在你的入口文件里面添加上这个字段就可以了<code>webpack_public_path<strong></strong></code>。<br>  <br> </p><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><br>          <td class="code"><pre><span class="line"> webpack_public_path<strong> = myRuntimePublicPath</strong></span><br><span class="line"></span><br><span class="line"><span class="comment">// rest of your application entry</span></span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><p></p><br><h3 id="output-chunkFilename"><br>  <a href="#output-chunkFilename" class="headerlink" title="output.chunkFilename"></a><code>output.chunkFilename</code></h3><br><p>非入口chunk的文件名，作为一个相对路径放到<code>output.path</code>里。</p><br><p><code>[id]</code> 替换chunk的id.</p><br><p><code>[name]</code> 替换chunk的名字 (or 如果没有名字就用id替换).</p><br><p><code>[hash]</code> 替换编译的hash.</p><br><p><code>[chunkhash]</code> 替换chunk的hash.</p><br><h3 id="output-sourceMapFilename"><br>  <a href="#output-sourceMapFilename" class="headerlink" title="output.sourceMapFilename"></a><code>output.sourceMapFilename</code></h3><br><p>js文件的SourceMap的文件名. 也同样在 <code>output.path</code> 路径下面.</p><br><p><code>[file]</code> 替换js文件的文件名.</p><br><p><code>[id]</code> 替换chunk的id.</p><br><p><code>[hash]</code> 替换编译的hash.</p><br><blockquote><br>  <p>默认: <code>“[file].map”</code></p><br></blockquote><br><h3 id="output-devtoolModuleFilenameTemplate"><br>  <a href="#output-devtoolModuleFilenameTemplate" class="headerlink" title="output.devtoolModuleFilenameTemplate"></a><code>output.devtoolModuleFilenameTemplate</code></h3><br><p>在生成的SourceMap里的函数<code>sources</code>数组的文件名模板。<br>  <br><code>[resource]</code>替换被Webpack用来解析文件的路径，包括最右边的加载器的请求参数(如果有的话)。</p><br><p><code>[resource-path]</code> 和 <code>[resource]</code>一样但是没有参数的事.</p><br><p><code>[loaders]</code> 是加载器和最右加载器（显示加载器）的参数名的列表<br>  <br><code>[all-loaders]</code> 是加载器和最右加载器（包括自动加载器）的参数名的列表<br>  <br><code>[id]</code> 替换module的id<br>  <br><code>[hash]</code>替换module标识符的hash<br>  <br><code>[absolute-resource-path]</code> 替换文件绝对路径名</p><br><blockquote><br>  <p>默认 (devtool=<code>[inline-]source-map</code>): <code>“webpack:///[resource-path]”</code><br>    <br>默认 (devtool=<code>eval</code>): <code>“webpack:///[resource-path]?[loaders]”</code><br>    <br>默认 (devtool=<code>eval-source-map</code>): <code>“webpack:///[resource-path]?[hash]”</code></p><br></blockquote><br><p>也可以定义成函数而不是字符串模板，该函数将接受<code>info</code>对象参数，次对象有下面几个属性：</p><br><ul><br>  <li>identifier</li><br>  <li>shortIdentifier</li><br>  <li>resource</li><br>  <li>resourcePath</li><br>  <li>absoluteResourcePath</li><br>  <li>allLoaders</li><br>  <li>query</li><br>  <li>moduleId</li><br>  <li>hash</li><br></ul><br><h3 id="output-devtoolFallbackModuleFilenameTemplate"><br>  <a href="#output-devtoolFallbackModuleFilenameTemplate" class="headerlink" title="output.devtoolFallbackModuleFilenameTemplate"></a><code>output.devtoolFallbackModuleFilenameTemplate</code></h3><br><p>和<code>output.devtoolModuleFilenameTemplate</code>一样，但是用在有重复module标识符的时候。</p><br><blockquote><br>  <p>默认: <code>“webpack:///[resourcePath]?[hash]”</code></p><br></blockquote><br><h3 id="output-devtoolLineToLine"><br>  <a href="#output-devtoolLineToLine" class="headerlink" title="output.devtoolLineToLine"></a><code>output.devtoolLineToLine</code></h3><br><p>为所有模块启用行映射模式，行映射模式用了一个简单的SourceMap，用在了每一行生成的source映射到原始的source，这是一个性能优化，仅用在你的性能需要更佳，你确定输入行对应生成行的时候。</p><br><p><code>true</code> 用在所有模块(不建议)</p><br><p>可以用类似于 <code>module.loaders</code> 的带有<code>{test, include, exclude}</code> 对象 来开启特定文件.</p><br><blockquote><br>  <p>默认: disabled</p><br></blockquote><br><h3 id="output-hotUpdateChunkFilename"><br>  <a href="#output-hotUpdateChunkFilename" class="headerlink" title="output.hotUpdateChunkFilename"></a><code>output.hotUpdateChunkFilename</code></h3><br><p>热替换chunks的文件名.<br>  <br>在<code>output.path</code>目录里。</p><br><p><code>[id]</code> 替换chunk的id.</p><br><p><code>[hash]</code> 替换编译的hash. (记录里的最近一个hash)</p><br><blockquote><br>  <p>默认: <code>“[id].[hash].hot-update.js”</code></p><br></blockquote><br><h3 id="output-hotUpdateMainFilename"><br>  <a href="#output-hotUpdateMainFilename" class="headerlink" title="output.hotUpdateMainFilename"></a><code>output.hotUpdateMainFilename</code></h3><br><p>热替换主文件的的名字。在output.path目录里。</p><br><p><code>[hash]</code> 替换编译的hash. (记录里的最近一个hash)</p><br><blockquote><br>  <p>默认: <code>“[hash].hot-update.json”</code></p><br></blockquote><br><h3 id="output-jsonpFunction"><br>  <a href="#output-jsonpFunction" class="headerlink" title="output.jsonpFunction"></a><code>output.jsonpFunction</code></h3><br><p>webpack异步加载的JSONP函数.<br>  <br>较短的函数可以缩小文件的大小，在一个页面里面拥有多个webpack引用的时候，需要使用不同的标识符.</p><br><blockquote><br>  <p>默认: <code>“webpackJsonp”</code></p><br></blockquote><br><h3 id="output-hotUpdateFunction"><br>  <a href="#output-hotUpdateFunction" class="headerlink" title="output.hotUpdateFunction"></a><code>output.hotUpdateFunction</code></h3><br><p>热替换时候一步更新js的jsonp方法.</p><br><blockquote><br>  <p>Default: <code>“webpackHotUpdate”</code></p><br></blockquote><br><h3 id="output-pathinfo"><br>  <a href="#output-pathinfo" class="headerlink" title="output.pathinfo"></a><code>output.pathinfo</code></h3><br><p>包含了一些module的信息的注解.</p><br><p><code>require(/<em> ./test </em>/23)</code></p><br><p>不要在生产环境里面使用.</p><br><blockquote><br>  <p>默认: <code>false</code></p><br></blockquote><br><h3 id="output-library"><br>  <a href="#output-library" class="headerlink" title="output.library"></a><code>output.library</code></h3><br><p>如果设置了此项, 将会把bundle打包成lib. <code>output.library</code> 的值就是文件名.</p><br><p>如果你在写一个单一的文件库的时候后使用他.</p><br><h3 id="output-libraryTarget"><br>  <a href="#output-libraryTarget" class="headerlink" title="output.libraryTarget"></a><code>output.libraryTarget</code></h3><br><p>格式化导出的库:</p><br><p><code>“var”</code> - 通过设置一个变量导出: <code>var Library = xxx</code> (default)</p><br><p><code>“this”</code> - 通过设置 <code>this</code>的属性来导出: <code>this[“Library”] = xxx</code></p><br><p><code>“commonjs”</code> - 通过设置 <code>exports</code>的属性导出: <code>exports[“Library”] = xxx</code></p><br><p><code>“commonjs2”</code> - 通过设置 <code>module.exports</code>导出: <code>module.exports = xxx</code></p><br><p><code>“amd”</code> - 导出为AMD (视情况可通过<code>output.library</code>来命名)</p><br><p><code>“umd”</code> - 导出为 AMD, CommonJS2 或者是顶级属性</p><br><blockquote><br>  <p>默认: <code>“var”</code></p><br></blockquote><br><p>如 <code>output.library</code> 没有设置, 但是 <code>output.libraryTarget</code> 被设置为了<code>var</code>以外的选项, 导出的对象的每个属性都是被复制的 (除了 <code>amd</code>, <code>commonjs2</code> 和 <code>umd</code>).</p><br><h3 id="output-umdNamedDefine"><br>  <a href="#output-umdNamedDefine" class="headerlink" title="output.umdNamedDefine"></a><code>output.umdNamedDefine</code></h3><br><p>如果 <code>output.libraryTarget</code> 被设置为 <code>umd</code> 且 <code>output.library</code> 被 设置, 设置该项为 <code>true</code> 将为AMD module 命名.</p><br><h3 id="output-sourcePrefix"><br>  <a href="#output-sourcePrefix" class="headerlink" title="output.sourcePrefix"></a><code>output.sourcePrefix</code></h3><br><p>在代码的每一行前面加上此前缀.</p><br><blockquote><br>  <p>默认: <code>“\t”</code></p><br></blockquote><br><h3 id="output-crossOriginLoading"><br>  <a href="#output-crossOriginLoading" class="headerlink" title="output.crossOriginLoading"></a><code>output.crossOriginLoading</code></h3><br><p>允许跨域加载chunk.</p><br><p>可能的值有:</p><br><p><code>false</code> - 禁止.</p><br><p><code>“anonymous”</code> - 可用.credentials将不随请求被发送.</p><br><p><code>“use-credentials”</code> - 可用.credentials将随请求被发送.</p><br><p>更多请查阅<br>  <a href="https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-crossorigin" target="_blank" rel="external">MDN</a><br></p><br><blockquote><br>  <p>默认: <code>false</code></p><br></blockquote><br><h2 id="module"><br>  <a href="#module" class="headerlink" title="module"></a><code>module</code></h2><br><p>影响标准 module 的选项(<code>NormalModuleFactory</code>)</p><br><h3 id="module-loaders"><br>  <a href="#module-loaders" class="headerlink" title="module.loaders"></a><code>module.loaders</code></h3><br><p>自动引用的加载器的数组.</p><br><p>每个元素有这些选项:</p><br><ul><br>  <li><code>test</code>: 必须满足的条件</li><br>  <li><code>exclude</code>: 不满足的条件</li><br>  <li><code>include</code>: 必须满足条件</li><br>  <li><code>loader</code>: 用 “!” 隔开多个loader</li><br>  <li><code>loaders</code>: 多个loader</li><br></ul><br><p>可能有一项是正则表达式(测试绝对路径)，包含绝对路径的字符串，一个函数 <code>function(absPath): bool</code>，或者一个数组，用”and”结合</p><br><p>更多:<br>  <a href="docs/loaders.md">loaders</a><br></p><br><p><em>重要信息</em>：这里的loader解析了他们应用相关的资源，这意味着他们不需要解析配置过的文件。如果你用npm安装loaders，node_modules文件夹不在资源文件夹的父目录中，webpack就找不到这个loader。你需要把node_modules文件夹的绝对路径添加到resolveLoader.root这个选项中。 (<code>resolveLoader: { root: path.join(dirname, “node_modules”) }</code>) </p><br><p>例子:</p><br><figure class="highlight js"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><br>          <td class="code"><pre><span class="line"><span class="built_in">module</span>: {</span><br><span class="line">  loaders: [</span><br><span class="line">    {</span><br><span class="line">      <span class="comment">// “test” is commonly used to match the file extension</span></span><br><span class="line">      test: <span class="regexp">/.jsx$/</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// “include” is commonly used to match the directories</span></span><br><span class="line">      include: [</span><br><span class="line">        path.resolve(<strong>dirname, <span class="string">“app/src”</span>),</strong></span><br><span class="line">        path.resolve(dirname, <span class="string">“app/test”</span>)</span><br><span class="line">      ],</span><br><span class="line"></span><br><span class="line">      <span class="comment">// “exclude” should be used to exclude exceptions</span></span><br><span class="line">      <span class="comment">// try to prefer “include” when possible</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// the “loader”</span></span><br><span class="line">      loader: <span class="string">“babel-loader”</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><h3 id="module-preLoaders-module-postLoaders"><br>  <a href="#module-preLoaders-module-postLoaders" class="headerlink" title="module.preLoaders, module.postLoaders"></a><code>module.preLoaders</code>, <code>module.postLoaders</code></h3><br><p> 语法跟module.loaders很像，前置和后置装载的数组loaders.</p><br><h3 id="module-noParse"><br>  <a href="#module-noParse" class="headerlink" title="module.noParse"></a><code>module.noParse</code></h3><br><p>一个正则表达式或者一组正则，不会匹配到的路径<br>  <br>它不匹配整个解析请求。</p><br><p>当忽略大的库的时候可以提高性能</p><br><p>该文件预计不可调用require,define或者其他类似的东西，不过可以用exports和modulle.exports.</p><br><h3 id="自动创建上下文默认值-module-xxxContextXxx"><br>  <a href="#自动创建上下文默认值-module-xxxContextXxx" class="headerlink" title="自动创建上下文默认值 module.xxxContextXxx"></a>自动创建上下文默认值 <code>module.xxxContextXxx</code></h3><br><p>这有许多选项配置自动创建上下文的默认值，我们区分三种情况下自动创建的上下文:</p><br><ul><br>  <li><code>exprContext</code>: 一个作为依赖的表达式 (如 <code>require(expr)</code>)</li><br>  <li><code>wrappedContext</code>: 一个加前缀或者后缀的字符串 (i. e. <code>require(“./templates/“ + expr)</code>)</li><br>  <li><code>unknownContext</code>: 一些其他不解析的 <code>require</code> (i. e. <code>require</code>)</li><br></ul><br><p>四个选项用来自动创建上下文:</p><br><ul><br>  <li><code>request</code>: 上下文的请求.</li><br>  <li><code>recursive</code>: 递归： 子目录需要被遍历.</li><br>  <li><code>regExp</code>: 正则表达式.</li><br>  <li><code>critical</code>: 这种类型的依赖应该被视为关键（发出警告）.</li><br></ul><br><p>选项和默认值:</p><br><p><code>unknownContextRequest = “.”</code>, <code>unknownContextRecursive = true</code>, <code>unknownContextRegExp = /^.\/.<em>$/</em></code>, <code>unknownContextCritical = true</code></p><br><p><code>exprContextRequest = “.”</code>, <code>exprContextRegExp = /^.\/.$/</code>, <code>exprContextRecursive = true</code>, <code>exprContextCritical = true</code></p><br><p><code>wrappedContextRegExp = /.<em>/</em></code>, <code>wrappedContextRecursive = true</code>, <code>wrappedContextCritical = false</code></p><br><blockquote><br>  <p>注意: <code>module.wrappedContextRegExp</code> 只指完整的正则表达式的中间部分，剩下的就是从字头和字尾里产生.</p><br></blockquote><br><p>例子:</p><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><br>          <td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="built_in">module</span>: {</span><br><span class="line">    <span class="comment">// Disable handling of unknown requires</span></span><br><span class="line">    unknownContextRegExp: <span class="regexp">/$^/</span>,</span><br><span class="line">    unknownContextCritical: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Disable handling of requires with a single expression</span></span><br><span class="line">    exprContextRegExp: <span class="regexp">/$^/</span>,</span><br><span class="line">    exprContextCritical: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Warn for every expression in require</span></span><br><span class="line">    wrappedContextCritical: <span class="literal">true</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><h2 id="resolve"><br>  <a href="#resolve" class="headerlink" title="resolve"></a><code>resolve</code></h2><br><p>影响解析模块的选项resolve.</p><br><h3 id="resolve-alias"><br>  <a href="#resolve-alias" class="headerlink" title="resolve.alias"></a><code>resolve.alias</code></h3><br><p>模块被其他模块名和路径替代.</p><br><p>改配置对象键名为模块名，键值为新的路径。类似于替换但是更比替换更好。如果该键结尾是只有$的确切匹配（没有$）将被替换。</p><br><p>如果键值是相对路径，它将与该文件中包含的文件相对</p><br><p>例子: 请求 <code>/abc/entry.js</code> 里面的require ，不同的alias对比.</p><br><div class="table-responsive"><br>  <table class="table"><br>    <thead><br>      <tr><br>        <th><code>alias:</code></th><br>        <th><code>require(“xyz”)</code></th><br>        <th><code>require(“xyz/file.js”)</code></th><br>      </tr><br>    </thead><br>    <tbody><br>      <tr><br>        <td><code>{}</code></td><br>        <td><code>/abc/node_modules/xyz/index.js</code></td><br>        <td><code>/abc/node_modules/xyz/file.js</code></td><br>      </tr><br>      <tr><br>        <td><code>{ xyz: “/absolute/path/to/file.js” }</code></td><br>        <td><code>/absolute/path/to/file.js</code></td><br>        <td><code>/abc/node_modules/xyz/file.js</code></td><br>      </tr><br>      <tr><br>        <td><code>{ xyz$: “/absolute/path/to/file.js” }</code></td><br>        <td><code>/absolute/path/to/file.js</code></td><br>        <td>error</td><br>      </tr><br>      <tr><br>        <td><code>{ xyz: “./dir/file.js” }</code></td><br>        <td><code>/abc/dir/file.js</code></td><br>        <td><code>/abc/node_modules/xyz/file.js</code></td><br>      </tr><br>      <tr><br>        <td><code>{ xyz$: “./dir/file.js” }</code></td><br>        <td><code>/abc/dir/file.js</code></td><br>        <td>error</td><br>      </tr><br>      <tr><br>        <td><code>{ xyz: “/some/dir” }</code></td><br>        <td><code>/some/dir/index.js</code></td><br>        <td><code>/some/dir/file.js</code></td><br>      </tr><br>      <tr><br>        <td><code>{ xyz$: “/some/dir” }</code></td><br>        <td><code>/some/dir/index.js</code></td><br>        <td><code>/abc/node_modules/xyz/file.js</code></td><br>      </tr><br>      <tr><br>        <td><code>{ xyz: “./dir” }</code></td><br>        <td><code>/abc/dir/index.js</code></td><br>        <td><code>/abc/dir/file.js</code></td><br>      </tr><br>      <tr><br>        <td><code>{ xyz: “modu” }</code></td><br>        <td><code>/abc/node_modules/modu/index.js</code></td><br>        <td><code>/abc/node_modules/modu/file.js</code></td><br>      </tr><br>      <tr><br>        <td><code>{ xyz$: “modu” }</code></td><br>        <td><code>/abc/node_modules/modu/index.js</code></td><br>        <td><code>/abc/node_modules/xyz/file.js</code></td><br>      </tr><br>      <tr><br>        <td><code>{ xyz: “modu/some/file.js” }</code></td><br>        <td><code>/abc/node_modules/modu/some/file.js</code></td><br>        <td>error</td><br>      </tr><br>      <tr><br>        <td><code>{ xyz: “modu/dir” }</code></td><br>        <td><code>/abc/node_modules/modu/dir/index.js</code></td><br>        <td><code>/abc/node_modules/dir/file.js</code></td><br>      </tr><br>      <tr><br>        <td><code>{ xyz: “xyz/dir” }</code></td><br>        <td><code>/abc/node_modules/xyz/dir/index.js</code></td><br>        <td><code>/abc/node_modules/xyz/dir/file.js</code></td><br>      </tr><br>      <tr><br>        <td><code>{ xyz$: “xyz/dir” }</code></td><br>        <td><code>/abc/node_modules/xyz/dir/index.js</code></td><br>        <td><code>/abc/node_modules/xyz/file.js</code></td><br>      </tr><br>    </tbody><br>  </table><br></div><br><p><code>index.js</code> 可能会解析其他的文件，如果设置了 <code>package.json</code>的话.</p><br><p><code>/abc/node_modules</code> 也可能解析到/node_modules里.</p><br><h3 id="resolve-root"><br>  <a href="#resolve-root" class="headerlink" title="resolve.root"></a><code>resolve.root</code></h3><br><p>包含你模块的目录（<strong>绝对路径</strong>），通常是一个目录数组，这个设置应该被用于添加个人目录到webpack查找路径里.</p><br><blockquote><br>  <p>必须是个绝对路径，不要这样写./app/modules.</p><br></blockquote><br><p>例子:</p><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><br>          <td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">‘path’</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// …</span></span><br><span class="line">resolve: {</span><br><span class="line">  root: [</span><br><span class="line">    path.resolve(<span class="string">‘./app/modules’</span>),</span><br><span class="line">    path.resolve(<span class="string">‘./vendor/modules’</span>)</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><h3 id="resolve-modulesDirectories"><br>  <a href="#resolve-modulesDirectories" class="headerlink" title="resolve.modulesDirectories"></a><code>resolve.modulesDirectories</code></h3><br><p>解析目录名的一个数组到当前目录以及先前的目录，并且是查找模块。这个函数和node怎么找到node_modules很像。比如如果值为[“mydir”]，webpack会查找“./mydir”, “../mydir”, “../../mydir”,等等.</p><br><blockquote><br>  <p>默认: <code>[“web_modules”, “node_modules”]</code></p><br>  <p>注意: Passing <code>“../someDir”</code>, <code>“app”</code>, <code>“.”</code> or an absolute path isn’t necessary here. Just use a directory name, not a path. Use only if you expect to have a hierarchy within these folders. Otherwise you may want to use the <code>resolve.root</code> option instead.</p><br></blockquote><br><h3 id="resolve-fallback"><br>  <a href="#resolve-fallback" class="headerlink" title="resolve.fallback"></a><code>resolve.fallback</code></h3><br><p>webpack没有在<code>resolve.root</code> 或者 <code>resolve.modulesDirectories</code>找到的模块的一个目录（或者目录绝对路径的数组）.</p><br><h3 id="resolve-extensions"><br>  <a href="#resolve-extensions" class="headerlink" title="resolve.extensions"></a><code>resolve.extensions</code></h3><br><p>解析模块的拓展名的数组。比如，为了发现一个CS文件，你这数组里应该包含字符串”.coffee”.</p><br><blockquote><br>  <p>默认: <code>[“”, “.webpack.js”, “.web.js”, “.js”]</code></p><br></blockquote><br><p><strong>重要信息</strong>: 设置这个选项将会重写默认值，这意味着webpack不再试着用默认的拓展名解析模块，如果你希望模块加载的时候带着他们的拓展名也可以得到正确额解析(比如require(‘./somefile.ext’))，你需要在你的数组里添加一个空字符串。如果你希望模块加载不带拓展名(比如require(‘underscore’))可以解析为“.js”的拓展名。你必须在数组里包含”.js”.</p><br><h3 id="resolve-packageMains"><br>  <a href="#resolve-packageMains" class="headerlink" title="resolve.packageMains"></a><code>resolve.packageMains</code></h3><br><p> 在package.json中查找符合这些字段的文件.</p><br><blockquote><br>  <p>默认: <code>[“webpack”, “browser”, “web”, “browserify”, [“jam”, “main”], “main”]</code></p><br></blockquote><br><h3 id="resolve-packageAlias"><br>  <a href="#resolve-packageAlias" class="headerlink" title="resolve.packageAlias"></a><code>resolve.packageAlias</code></h3><br><p>在package.json中查询对象里的字段，键值对是按照<br>  <a href="https://gist.github.com/defunctzombie/4339901" target="_blank" rel="external">这个规范</a>的别名来进行的</p><br><blockquote><br>  <p>没有默认值</p><br></blockquote><br><p>比如: 比如”browser”会检查browser字段.</p><br><h3 id="resolve-unsafeCache"><br>  <a href="#resolve-unsafeCache" class="headerlink" title="resolve.unsafeCache"></a><code>resolve.unsafeCache</code></h3><br><p>启用不安全的缓存来解析一部分文件。改变缓存路径也许会导致出错（罕见情况下）。 一个正则表达式数组里，只有一个正则或只有一个为true（对应全部文件）是最好的实践 。如果解析路径匹配，就会被缓存。</p><br><blockquote><br>  <p>默认: <code>[]</code></p><br></blockquote><br><h2 id="resolveLoader"><br>  <a href="#resolveLoader" class="headerlink" title="resolveLoader"></a><code>resolveLoader</code></h2><br><p>像 <code>resolve</code> 但是是对于loaders.</p><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><br>          <td class="code"><pre><span class="line"><span class="comment">// 默认:</span></span><br><span class="line">{</span><br><span class="line">    modulesDirectories: [<span class="string">“web_loaders”</span>, <span class="string">“web_modules”</span>, <span class="string">“node_loaders”</span>, <span class="string">“node_modules”</span>],</span><br><span class="line">    extensions: [<span class="string">“”</span>, <span class="string">“.webpack-loader.js”</span>, <span class="string">“.web-loader.js”</span>, <span class="string">“.loader.js”</span>, <span class="string">“.js”</span>],</span><br><span class="line">    packageMains: [<span class="string">“webpackLoader”</span>, <span class="string">“webLoader”</span>, <span class="string">“loader”</span>, <span class="string">“main”</span>]</span><br><span class="line">}</span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><p>注意，你可以用alias，其他特性和resolve相似。例如 <code>{ txt: ‘raw-loader’ }</code>是 <code>txt!templates/demo.txt</code>用 <code>raw-loader</code>后的结果.</p><br><h3 id="resolveLoader-moduleTemplates"><br>  <a href="#resolveLoader-moduleTemplates" class="headerlink" title="resolveLoader.moduleTemplates"></a><code>resolveLoader.moduleTemplates</code></h3><br><p>这是resolveLoader 唯一的属性.</p><br><p>它描述了尝试的模块名称的替代名</p><br><blockquote><br>  <p>默认: <code>[“-webpack-loader”, “<em>-web-loader”, “</em>-loader”, “*”]</code></p><br></blockquote><br><h2 id="externals"><br>  <a href="#externals" class="headerlink" title="externals"></a><code>externals</code></h2><br><p>指定的依赖不会被webpack解析，但会成为bundle里的依赖。<code>output.libraryTarget</code>.决定着依赖的类型</p><br><p>值是对象，字符串，函数，正则，数组都会被接受。</p><br><ul><br>  <li>字符串：一个精确匹配的依赖会变成外部依赖，同意的字符串会被用于外部依赖。</li><br>  <li>对象：如果依赖精确匹配到了对象的一个属性，属性值就会被当作依赖。属性值可以包含一个依赖型的前缀，用一个空格隔开。如果属性值为true，则使用该属性名。如果属性值为false，外部测试失败，这个依赖是内部依赖。见下面的例子。</li><br>  <li>函数：<code>function(context, request, callback(err, result))</code>。函数会在每个依赖中调用。如果结果被传递到回调函数里，这个值就会被像处理对象属性值那样处理。</li><br>  <li>正则表达式：每个被匹配的依赖都会成为外部依赖。匹配的文本会被用作外部依赖的请求。因为请求是用于生成外部代码钩子的确切代码，如果你匹配到一个cmd的包(比如 <code>‘../some/package.js’</code>),相反使用外部<code>function</code>的策略。你可以通过<code>callback(null, “require(‘“ + request + “‘)”</code>引入包，这个包生成<code>module.exports = require(‘../some/package.js’);</code>使用要求在webpack上下文外。</li><br>  <li>数组：这个表的多个值(递归)<br>    <br>例如:</li><br></ul><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><br>          <td class="code"><pre><span class="line">{</span><br><span class="line">    output: { libraryTarget: <span class="string">“commonjs”</span> },</span><br><span class="line">    externals: [</span><br><span class="line">        {</span><br><span class="line">            a: <span class="literal">false</span>, <span class="comment">// a is not external</span></span><br><span class="line">            b: <span class="literal">true</span>, <span class="comment">// b is external (require(“b”))</span></span><br><span class="line">            <span class="string">“./c”</span>: <span class="string">“c”</span>, <span class="comment">// “./c” is external (require(“c”))</span></span><br><span class="line">            <span class="string">“./d”</span>: <span class="string">“var d”</span> <span class="comment">// “./d” is external (d)</span></span><br><span class="line">        },</span><br><span class="line">        <span class="comment">// Every non-relative module is external</span></span><br><span class="line">        <span class="comment">// abc -&gt; require(“abc”)</span></span><br><span class="line">        /^[a-z\<span class="number">-0</span><span class="number">-9</span>]+$/,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">context, request, callback</span>) </span>{</span><br><span class="line">            <span class="comment">// Every module prefixed with “global-“ becomes external</span></span><br><span class="line">            <span class="comment">// “global-abc” -&gt; abc</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="regexp">/^global-/</span>.test(request))</span><br><span class="line">                <span class="keyword">return</span> callback(<span class="literal">null</span>, <span class="string">“var “</span> + request.substr(<span class="number">7</span>));</span><br><span class="line">            callback();</span><br><span class="line">        },</span><br><span class="line">        <span class="string">“./e”</span> <span class="comment">// “./e” is external (require(“./e”))</span></span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><div class="table-responsive"><br>  <table class="table"><br>    <thead><br>      <tr><br>        <th>type</th><br>        <th>value</th><br>        <th>resulting import code</th><br>      </tr><br>    </thead><br>    <tbody><br>      <tr><br>        <td>“var”</td><br>        <td><code>“abc”</code></td><br>        <td><code>module.exports = abc;</code></td><br>      </tr><br>      <tr><br>        <td>“var”</td><br>        <td><code>“abc.def”</code></td><br>        <td><code>module.exports = abc.def;</code></td><br>      </tr><br>      <tr><br>        <td>“this”</td><br>        <td><code>“abc”</code></td><br>        <td><code>(function() { module.exports = this[“abc”]; }());</code></td><br>      </tr><br>      <tr><br>        <td>“this”</td><br>        <td><code>[“abc”, “def”]</code></td><br>        <td><code>(function() { module.exports = this[“abc”][“def”]; }());</code></td><br>      </tr><br>      <tr><br>        <td>“commonjs”</td><br>        <td><code>“abc”</code></td><br>        <td><code>module.exports = require(“abc”);</code></td><br>      </tr><br>      <tr><br>        <td>“commonjs”</td><br>        <td><code>[“abc”, “def”]</code></td><br>        <td><code>module.exports = require(“abc”).def;</code></td><br>      </tr><br>      <tr><br>        <td>“amd”</td><br>        <td><code>“abc”</code></td><br>        <td><code>define([“abc”], function(X) { module.exports = X; })</code></td><br>      </tr><br>      <tr><br>        <td>“umd”</td><br>        <td><code>“abc”</code></td><br>        <td>everything above</td><br>      </tr><br>    </tbody><br>  </table><br></div><br><p>如果没有作为<code>amd/umd</code>的目标解析，将会执行amd或者umd的额外值.</p><br><blockquote><br>  <p>注意，如果用umd你可以指定一个对象的额外值，属性为 commonjs, commonjs2, amd和root会被设置不同的值.</p><br></blockquote><br><h2 id="target"><br>  <a href="#target" class="headerlink" title="target"></a><code>target</code></h2><br><p>编译到的目标使用环境</p><br><ul><br>  <li><code>“web”</code> 浏览器环境(默认)</li><br>  <li><code>“webworker”</code> WebWorker</li><br>  <li><code>“node”</code> node (使用 <code>require</code> 加载 chunk)</li><br>  <li><code>“async-node”</code> node (使用 <code>fs</code> 和 <code>vm</code> 来加载异步chunk)</li><br>  <li><code>“node-webkit”</code> webkit, 使用jsonp加载chunk 但同样支持 node.js module 加， equire(“nw.gui”) (实验性)</li><br>  <li><code>“electron”</code><br>    <a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a> – 支持 <code>require</code> 带有Electron特性 modules.</li><br></ul><br><h2 id="bail"><br>  <a href="#bail" class="headerlink" title="bail"></a><code>bail</code></h2><br><p>将第一个错误报告为严重错误而不是容忍他。</p><br><h2 id="profile"><br>  <a href="#profile" class="headerlink" title="profile"></a><code>profile</code></h2><br><p>为每一个module捕获定时信息。</p><br><blockquote><br>  <p>提示: 使用<br>    <a href="http://webpack.github.io/analyse" target="_blank" rel="external">analyze tool</a> 来做可视化分析. <code>–json</code> 或者 <code>stats.toJson()</code> 将给出states的JSON数据.</p><br></blockquote><br><h2 id="cache"><br>  <a href="#cache" class="headerlink" title="cache"></a><code>cache</code></h2><br><p>在多次增量编译时候，缓存生成的moudle和chunk来提高性能。</p><br><p>在watch模式下面默认是开启的.</p><br><p>你可以传<code>false</code>将它禁止掉.</p><br><p>你也可以传递一个对象来开启他，并且webpack会利用传入的对象作为缓存，这样你就可以在多次编译当中共享缓存对象。<br>  <br>注意：不要在不同的选项之间共享缓存。</p><br><h2 id="debug"><br>  <a href="#debug" class="headerlink" title="debug"></a><code>debug</code></h2><br><p>讲loader调到debug模式.</p><br><h2 id="devtool"><br>  <a href="#devtool" class="headerlink" title="devtool"></a><code>devtool</code></h2><br><p>选择开发工具来提高debug效率.</p><br><ul><br>  <li><code>eval</code> 文档上解释的很明白，每个模块都封装到 eval 包裹起来，并在后面添加 //# sourceURL</li><br>  <li><code>source-map</code> 这是最原始的 <code>source-map</code> 实现方式，其实现是打包代码同时创建一个新的 sourcemap 文件， 并在打包文件的末尾添加 //# sourceURL 注释行告诉 JS 引擎文件在哪儿</li><br>  <li><code>hidden-source-map</code> 文档上也说了，就是 soucremap 但没注释，没注释怎么找文件呢？貌似只能靠后缀，譬如 xxx/bundle.js 文件，某些引擎会尝试去找 xxx/bundle.js.map</li><br>  <li><code>inline-source-map</code> 为每一个文件添加 sourcemap 的 DataUrl，注意这里的文件是打包前的每一个文件而不是最后打包出来的，同时这个 DataUrl 是包含一个文件完整 souremap 信息的 Base64 格式化后的字符串，而不是一个 url。</li><br>  <li><code>eval-source-map</code> 这个就是把 eval 的 sourceURL 换成了完整 <code>souremap</code> 信息的 DataUrl</li><br>  <li><code>cheap-source-map</code> 不包含列信息，不包含 loader 的 <code>sourcemap</code>，（譬如 <code>babel</code> 的 <code>sourcemap</code>）</li><br>  <li><code>cheap-module-source-map</code> 不包含列信息，同时 loader 的 sourcemap 也被简化为只包含对应行的。最终的 sourcemap 只有一份，它是 webpack 对 loader 生成的 sourcemap 进行简化，然后再次生成的。</li><br></ul><br><p>前缀 <code>@</code>, <code>#</code> 或者 <code>#@</code> 将执行编译指示风格. (默认 <code>#</code>, 推荐)</p><br><p>可以组合使用. <code>hidden</code>, <code>inline</code>, <code>eval</code> 标注样式是独立的.</p><br><p>比如. <code>cheap-module-inline-source-map</code>, <code>cheap-eval-source-map</code>, <code>#@source-map</code></p><br><blockquote><br>  <p>注意: 如果你的module已经包含了SourceMap那么你需要使用<br>    <a href="https://github.com/webpack/source-map-loader" target="_blank" rel="external">source-map-loader</a> 将导出的sourceMap合并.</p><br></blockquote><br><div class="table-responsive"><br>  <table class="table"><br>    <thead><br>      <tr><br>        <th>devtool</th><br>        <th>编译</th><br>        <th>重编译速度</th><br>        <th>生产环境支持</th><br>        <th>质量</th><br>      </tr><br>    </thead><br>    <tbody><br>      <tr><br>        <td>eval</td><br>        <td>+++</td><br>        <td>+++</td><br>        <td>no</td><br>        <td>generated code</td><br>      </tr><br>      <tr><br>        <td>cheap-eval-source-map</td><br>        <td>+</td><br>        <td>++</td><br>        <td>no</td><br>        <td>transformed code (lines only)</td><br>      </tr><br>      <tr><br>        <td>cheap-source-map</td><br>        <td>+</td><br>        <td>o</td><br>        <td>yes</td><br>        <td>transformed code (lines only)</td><br>      </tr><br>      <tr><br>        <td>cheap-module-eval-source-map</td><br>        <td>o</td><br>        <td>++</td><br>        <td>no</td><br>        <td>original source (lines only)</td><br>      </tr><br>      <tr><br>        <td>cheap-module-source-map</td><br>        <td>o</td><br>        <td>-</td><br>        <td>yes</td><br>        <td>original source (lines only)</td><br>      </tr><br>      <tr><br>        <td>eval-source-map</td><br>        <td>–</td><br>        <td>+</td><br>        <td>no</td><br>        <td>original source</td><br>      </tr><br>      <tr><br>        <td>source-map</td><br>        <td>–</td><br>        <td>–</td><br>        <td>yes</td><br>        <td>original source</td><br>      </tr><br>    </tbody><br>  </table><br></div><br><p>例如:</p><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><br>          <td class="code"><pre><span class="line">{</span><br><span class="line">    devtool: <span class="string">“#inline-source-map”</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// =&gt;</span></span><br><span class="line"><span class="comment">//# sourceMappingURL=…</span></span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><blockquote><br>  <p>注意: 下一个主要版本里面 <code>-d</code> 选项 将改成 <code>cheap-module-eval-source-map</code></p><br></blockquote><br><h2 id="devServer"><br>  <a href="#devServer" class="headerlink" title="devServer"></a><code>devServer</code></h2><br><p>设置<br>  <a href="https://github.com/webpack/webpack-dev-server" target="_blank" rel="external">webpack-dev-server</a> 的相关配置。</p><br><p>例子:</p><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><br>          <td class="code"><pre><span class="line">{</span><br><span class="line">    devServer: {</span><br><span class="line">        contentBase: <span class="string">“./build”</span>,</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><h2 id="node"><br>  <a href="#node" class="headerlink" title="node"></a><code>node</code></h2><br><p>包含了许多node的polyfills或者mock</p><br><ul><br>  <li><code>console</code>: <code>true</code> 或者 <code>false</code></li><br>  <li><code>global</code>: <code>true</code> 或者 <code>false</code></li><br>  <li><code>process</code>: <code>true</code>, <code>“mock”</code> 或者 <code>false</code></li><br>  <li><code>Buffer</code>: <code>true</code> 或者 <code>false</code></li><br>  <li><code><strong>filename</strong></code>: <code>true</code> (real filename), <code>“mock”</code> (<code>“/index.js”</code>) 或者 <code>false</code></li><br>  <li><code>dirname</code>: <code>true</code> (真实 dirname), <code>“mock”</code> (<code>“/“</code>) 或者 <code>false</code></li><br>  <li><code>&lt;node buildin&gt;</code>: <code>true</code>, <code>“mock”</code>, <code>“empty”</code> 或者 <code>false</code></li><br></ul><br><figure class="highlight javascript"><br>  <div class="table-responsive"><br>    <table class="table"><br>      <tbody><br>        <tr><br>          <td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><br>          <td class="code"><pre><span class="line"><span class="comment">// Default:</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">console</span>: <span class="literal">false</span>,</span><br><span class="line">    global: <span class="literal">true</span>,</span><br><span class="line">    process: <span class="literal">true</span>,</span><br><span class="line">    Buffer: <span class="literal">true</span>,</span><br><span class="line">    <strong>filename: <span class="string">“mock”</span>,</strong></span><br><span class="line">    dirname: <span class="string">“mock”</span>,</span><br><span class="line">    setImmediate: <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td><br>        </tr><br>      </tbody><br>    </table><br>  </div><br></figure><br><h2 id="amd"><br>  <a href="#amd" class="headerlink" title="amd"></a><code>amd</code></h2><br><p>设置<code>require.amd</code>和<code>define.amd</code>的值<br>  <br>例如: <code>amd: { jQuery: true }</code> ( 1.x AMD 版本的jQuery)</p><br><h2 id="loader"><br>  <a href="#loader" class="headerlink" title="loader"></a><code>loader</code></h2><br><p>自定义一些在加载器上下文有用的值。</p><br><h2 id="recordsPath-recordsInputPath-recordsOutputPath"><br>  <a href="#recordsPath-recordsInputPath-recordsOutputPath" class="headerlink" title="recordsPath, recordsInputPath, recordsOutputPath"></a><code>recordsPath</code>, <code>recordsInputPath</code>, <code>recordsOutputPath</code></h2><br><p>存储/加载 compiler状态 从/到 一个json文件里面。结果将会是一些module和chunk的固定id。</p><br><p>需要是 <strong>绝对路径</strong>，如果<code>recordsInputPath</code>,<code>recordsOutputPath</code>都为undefined，<code>recordsInputPath</code>将被使用。</p><br><p>在多个编译请求做热替换的时候是需要这个配置的。</p><br><h2 id="plugins"><br>  <a href="#plugins" class="headerlink" title="plugins"></a><code>plugins</code></h2><br><p>给编译器添加额外的插件.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;blockquote&gt;&lt;br&gt;  &lt;p&gt;webpack 通过一个配置对象来操作. 有两种方式来传递这个对象:&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3 id=&quot;CLI&quot;&gt;&lt;br&gt;  &lt;a href=&quot;#CLI&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>百万英雄题库（持续更新...）</title>
    <link href="https://llwanran.github.io/posts/3064957524.html"/>
    <id>https://llwanran.github.io/posts/3064957524.html</id>
    <published>2018-01-22T06:39:00.000Z</published>
    <updated>2018-01-26T06:46:35.316Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/pasted-4.png" alt=""></p><h3 id="百万英雄重点题目及答案"><a href="#百万英雄重点题目及答案" class="headerlink" title="百万英雄重点题目及答案"></a>百万英雄重点题目及答案</h3><ul><li><p><strong>1、生活中“煤气中毒”主要指的是哪种气体进入人体呼吸道而发生的？</strong></p><ul><li>A.氯气  B.二氧化碳  <font color="red">C.一氧化碳</font><blockquote><ol><li>氯气：常温常压下为黄绿色，有强烈刺激性气味的剧毒气体，具有窒息性 ，密度比空气大，具有毒性。</li><li>二氧化碳：常温下是一种无色无味、不可燃的气体，密度比空气大，略溶于水，与水反应生成碳酸。</li><li>一氧化碳：在标准状况下，纯品为无色、无臭、无刺激性的气体，在水中的溶解度甚低，极难溶于水。一氧化碳对全身的组织细胞均有毒性作用，尤其对大脑皮质的影响最为严重。</li></ol></blockquote></li></ul></li><li><p><strong>2、剪刀的使用运用的是物理学上的什么原理？</strong></p><ul><li>A.反冲原理  <font color="red">B.杠杆原理</font>  C.电离原理<blockquote><ol><li>反冲运动：如果一个静止的物体在内力的作用下分裂成两个部分，一部分向某个方向运动，另一部分必然向相反的方向运动。这个现象叫做反冲。 反冲运动中，物体受到的反冲作用通常叫做反冲力。</li><li>杠杆原理：又分为费力杠杆、省力杠杆和等臂杠杆，动力×动力臂=阻力×阻力臂。</li><li>原子和分子的电离：中性原子或分子失去电子成为正离子的过程。处于基态的中性原子（或分子）受到电子、正离子、其他原子碰撞或吸收光子而获得一定能量时，将跃迁到较高能态。</li></ol></blockquote></li></ul></li></ul><ul><li><strong>3、在一场跑步比赛中，小明超过了第二名，问小明现在是第几名？</strong><ul><li>A.1  <font color="red">B.2</font>  C.3</li></ul></li></ul><ul><li><p><strong>4、下列哪个选项是长江上游河段的名称？</strong></p><ul><li>A.怒江  <font color="red">B.金沙江</font>  C.扬子江<blockquote><ol><li>怒江：是中国西南地区的大河流之一，属于外流河水系，怒江六库也成为了中国唯一一条没有建造水电站的河流。</li><li>金沙江：是长江的上游河段，川藏界河。</li><li>扬子江：是长江从南京以下至入海口的下游河段的旧称，流经江苏省、上海市。</li></ol></blockquote></li></ul></li><li><p><strong>5、十二生肖中排在羊前面一个的是什么动物？</strong></p><ul><li>A.猴  <font color="red">B.马</font>  C.蛇<blockquote><p>十二生肖：鼠、牛、虎、兔、龙、蛇、马、羊、猴、鸡、狗、猪<br>十二地支：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥</p></blockquote></li></ul></li><li><p><strong>6、苏轼《赤壁赋》中“其声呜呜然，如怨如慕，如泣如诉”描述的是哪种乐器的声音？</strong></p><ul><li>A.琵琶  B.古筝  <font color="red">C.箫</font><blockquote><p>于是饮酒乐甚，扣舷而歌之。歌曰：“桂棹兮兰桨，击空明兮溯流光。渺渺兮予怀，望美人兮天一方。”客有吹洞箫者，倚歌而和之。其声呜呜然，如怨如慕，如泣如诉，余音袅袅，不绝如缕。舞幽壑之潜蛟，泣孤舟之嫠妇。</p></blockquote></li></ul></li><li><p><strong>7、一节干电池的电压是多少？</strong></p><ul><li><font color="red">A.1.5V</font>  B.1.7V  C.2V</li></ul></li></ul><ul><li><strong>8、2017年诺贝尔文学奖获得者是？</strong><ul><li>A.爱丽丝-门罗  B.村上春树  <font color="red">C.石黑一雄</font><blockquote><ol><li>爱丽丝-门罗：2013年诺贝尔文学奖，代表作《快乐影子之舞》、《逃离》、《石城远望》</li><li>村上春树：代表作《且听风吟》、《挪威的森林》</li></ol></blockquote></li></ul></li></ul><ul><li><p><strong>9、湄公河不经过以下哪个国家？</strong></p><ul><li><font color="red">A.印度</font>  B.缅甸  C.老挝<blockquote><p>湄公河：发源于中国唐古拉山的东北坡，在中国境内叫澜沧江，流入中南半岛后的河段称为湄公河。流经中国、老挝、缅甸、泰国、柬埔寨和越南，于越南胡志明市流入南海。</p></blockquote></li></ul></li><li><p><strong>10、10块钱等于多少分？</strong></p><ul><li>A.10  B.100  <font color="red">C.1000</font></li></ul></li></ul><ul><li><p><strong>11、四川话“摆龙门阵”是什么意思？</strong></p><ul><li><font color="red">A.拉拉家常</font>  B.打打麻将  C.聚众斗殴<blockquote><p>摆龙门阵：中国民间文化活动形式，流传全国西南地区。就是三五人相聚或两人一起同行、玩耍、做活时均可讲故事、聊天聊天、闲谈、神吹、侃大山的文化活动。</p></blockquote></li></ul></li><li><p><strong>12、伦敦城市标志之一的“伦敦眼”是什么建筑？</strong></p><ul><li>A.塔桥  <font color="red">B.摩天轮</font>  C.风车<blockquote><ol><li>塔桥：指伦敦塔桥，是泰晤士河上最著名，也是最壮观的桥梁。</li><li>伦敦眼：坐落在英国伦敦泰晤士河畔，是世界上首座、同时截至2005年最大的观景摩天轮，为伦敦的地标及出名旅游观光点之一。</li></ol></blockquote></li></ul></li><li><p><strong>13、“玄武门之变”发生在哪位皇帝在位期间？</strong></p><ul><li>A.唐太宗  B.唐高宗  <font color="red">C.唐高祖</font><blockquote><p>玄武门之变：是唐高祖武德九年六月初四（公元626年7月2日）由当时唐高祖李渊次子秦王李世民在唐王朝的首都长安城（今陕西省西安市）大内皇宫的北宫门——玄武门附近发动的一次流血政变。</p></blockquote></li></ul></li><li><p><strong>14、“木马”这个名字来源于古希腊的哪场战争？</strong></p><ul><li>A.希波战争  <font color="red">B.特洛伊战争</font>  C.七年战争<blockquote><ol><li>希波战争：是世界历史上第一次欧亚两洲大规模国际战争。古代波斯帝国（波斯第一帝国，即阿契美尼德王朝）为了扩张版图而入侵希腊的战争，战争以希腊获胜，波斯战败而告结束。</li><li>木马：古希腊传说，特洛伊王子帕里斯访问希腊，诱走了王后海伦，希腊人因此远征特洛伊。围攻9年后，到第10年，希腊将领奥德修斯献了一计，就是把一批勇士埋伏在一匹巨大的木马腹内，放在城外后，佯作退兵。特洛伊人以为敌兵已退，就把木马作为战利品搬入城中。到了夜间，埋伏在木马中的勇士跳出来，打开了城门，希腊将士一拥而入攻下了城池。后来，人们在写文章时就常用“特洛伊木马”这一典故，用来比喻在敌方营垒里埋下伏兵里应外合的活动。</li><li>七年战争：由欧洲列强之间的对抗所驱动。英国与法兰西和西班牙在贸易与殖民地上相互竞争。同时普鲁士，这个日益崛起的强国与奥地利正同时在神圣罗马帝国的体系内外争夺霸权。</li></ol></blockquote></li></ul></li><li><p><strong>15、三角形的内角和是？</strong></p><ul><li>A.120°  <font color="red">B.180°</font>  C.240°<blockquote><p>三角形内角和定理：三角形的内角和等于180°。<br>用数学符号表示为：在△ABC中，∠1+∠2+∠3=180°（见概述图）。</p></blockquote></li></ul></li><li><p><strong>16、以下哪部作品不是鲁迅的？</strong></p><ul><li>A.《孔乙已》  B.《记念刘和珍君》  <font color="red">C.《家》</font><blockquote><ol><li>《孔乙己》是近代文学巨匠鲁迅所著的短篇小说，最早发表在1919年4月《新青年》第六卷第四号[1]  ，后编入《呐喊》，是鲁迅在“五四”运动前夕继《狂人日记》之后第二篇白话小说。</li><li>《记念刘和珍君》是民国时期文学家鲁迅收录在《华盖集续编》的散文。原文于1926年4月12日发表在《语丝》周刊第七十四期。刘和珍是北京学生运动的领袖之一，1926年在“三·一八惨案”中遇害，年仅22岁。鲁迅先生在参加了刘和珍的追悼会之后，亲作《记念刘和珍君》一文，追忆这位始终微笑的和蔼的学生，痛悼“为中国而死的中国的青年”，歌颂“虽殒身不恤”的“中国女子的勇毅”。</li><li>《家》，中国作家巴金的长篇小说，《激流三部曲》中的第一部，入选20世纪中文小说100强（第8位）。其他两部为《春》、《秋》，《家》被认为是巴金的代表作之一。最早于1931年在《时报》开始连载，原篇名为《激流》。开明书局于1933年5月出版首本《家》单行本。</li></ol></blockquote></li></ul></li></ul><ul><li><p><strong>17、在田径运动男子110米跨栏中，运动员一共要跨过多少个栏？</strong></p><ul><li>A.9  <font color="red">B.10</font>  C.11<blockquote><p>男子110米栏是男子110米跨栏跑的简称，属田径中的径赛项目的一种，也是奥运会项目。跨栏最早在19世纪出现于英国，当时叫障碍跑。<br>男子110米栏是由110米的跑道和跑道上面的10个跨栏组成的。第一栏距起跑线13.72米。第1—10栏栏间距离10码，约合9．14米，栏高106.7厘米（根据不同的比赛，栏高分为五等： 76.2厘米、84.0厘米、91.4厘米、100.0厘米、106.7厘米）</p></blockquote></li></ul></li><li><p><strong>18、从职责上看，美国的国务卿相当于我国的？</strong></p><ul><li><font color="red">A.外交部长</font>  B.国务院总理  C.中央军委主席<blockquote><p>美国国务卿是美国国务院的首长。美国国务院（United States Department of State，有时亦用State Department），美国联邦政府主管外交并兼管部分内政事务的行政部门，直属美国政府管理的外事机构，相当于外交部。</p></blockquote></li></ul></li></ul><ul><li><p><strong>19、日常生活中常说的“白色污染”是指哪一类污染？</strong></p><ul><li><font color="red">A.塑料垃圾污染</font>  B.光污染  C.石油污染<blockquote><p>白色污染是人们对难降解的塑料垃圾(多指塑料袋)污染环境现象的一种形象称谓。</p></blockquote></li></ul></li><li><p><strong>20、相同条件下，以下哪种金属材料导电性最好？</strong></p><ul><li>A.铁  <font color="red">B.银</font>  C.铜<blockquote><p>银的电阻率最小，在相同条件下，”导体”依导电系数可分为银→铜→金→铝→钨→镍→铁。 电阻率与温度等条件有关。<br>金属导电原理：金属原子外层电子较少，组合成结构元之后，每个原子的外层仅有一、二个价和运转围绕，原子的外层仍存在较多的电子空位，能容外来电子进入、移动，因而易于导电。</p></blockquote></li></ul></li><li><p><strong>20、唐僧取经的最后一难是？</strong></p><ul><li>A.平顶山遇魔  <font color="red">B.通天河落水</font>  C.出城逢虎<blockquote><ol><li>平顶山逢魔二十四难(金银角大王)</li><li>第八十一难为通天河遇鼋湿经书</li><li>出城逢虎第五难(遇上寅将军、熊山君、特处士三怪，但这三怪只吃掉唐僧随从)</li></ol></blockquote></li></ul></li></ul><ul><li><p><strong>21、高尔夫球比赛中，标准杆5杆的球道，只用2杆就进洞，我们把这种情况叫什么？</strong></p><ul><li>A.老鹰球  B.小鸟球  <font color="red">C.信天翁球</font><blockquote><ul><li>Albatross（信天翁球）低于标准杆三杆以上</li><li>Hole in One（ACE，一杆进洞）/Eagle（老鹰球）低于标准杆两杆</li><li>Birdie（小鸟球）低于标准杆一杆</li><li>Par（标准杆）</li><li>Bogey（补给球，愿意又叫柏忌球，妖怪的意思）高于标准杆一杆</li><li>Double Bogey（双补给球）高于标准杆两杆</li><li>Triple Bogey（三补给球）高于标准杆三杆以上</li></ul></blockquote></li></ul></li><li><p><strong>22、“毛氏红烧肉”是哪个地方的美食？</strong></p><ul><li>A.陕西延安  <font color="red">B.湖南湘潭</font>  C.贵州遵义</li></ul></li></ul><ul><li><p><strong>23、被后世称为“八大山人”的是几个人？</strong></p><ul><li>A.八个  B.四个  <font color="red">C.一个</font><blockquote><p>朱耷（1626—约1705年），明末清初画家，中国画一代宗师。本名朱统托，字雪个，号八大山人、个山 、人屋、道朗等，汉族，江西南昌人。<br>他是明太祖朱元璋第十七子朱权的九世孙，本是皇家世孙。明亡后削发为僧，成了亡命之徒，后改信道教，住南昌青云谱道院。擅书画。</p></blockquote></li></ul></li><li><p><strong>24、“冲冠一怒为红颜”此处的“红颜”是指？</strong></p><ul><li>A.妲己  <font color="red">B.陈圆圆</font>  C.李师师</li></ul></li></ul><ul><li><strong>25、从地理位置上来看，夏威夷属于哪个大洲？</strong><ul><li><font color="red">A.大洋洲</font>  B.北美洲  C.亚洲</li></ul></li></ul><ul><li><p><strong>26、成语“围魏救赵”讲的是谁的故事？</strong></p><ul><li>A.孙策  <font color="red">B.孙膑</font>  C.孙武<blockquote><p>歇后语：孙膑救邯郸——围魏救赵</p></blockquote></li></ul></li><li><p><strong>27、味精的主要成分是什么？</strong></p><ul><li><font color="red">A.谷氨酸钠</font>  B.氯化钠  C.乙醇</li></ul></li></ul><ul><li><p><strong>28、“一日不见如隔三秋”里的“三秋”是指下列哪一个？</strong></p><ul><li><font color="red">A.三个季度</font>  B.三个月  C.三年<blockquote><p>古人指的“三秋”即“一秋”为一个季度，“三秋”为三个季度，约是现在的九个月时间</p></blockquote></li></ul></li><li><p><strong>29、“昭君出塞”发生在哪个朝代？</strong></p><ul><li><font color="red">A.汉朝</font>  B.唐朝  C.晋朝<blockquote><ul><li>和亲：<br>西汉初年，由于战争破坏，经济亟待复苏，政权尚未巩固，无力与匈奴作战。汉高祖只好采纳“和亲”的建议，把汉室公主嫁给单于，每年送去大量贡品，与匈奴约为兄弟，以缓和匈奴的侵扰。但是和亲政策不能阻挡匈奴贵族的掠夺。</li><li>昭君出塞：<br>随着匈奴贵族的军事实力削弱，其统治阶级发生内讧，匈奴分裂成了南北两部。南部呼韩邪单于在汉朝帮助下重新统一匈奴。汉元帝以宫人王昭君嫁给了呼韩邪单于，结束了百余年来汉、匈之间的武装冲突，此后约半个世纪，在北部边境出现了“三世无犬吠之警，黎庶无干戈之役”的和平局面。</li></ul></blockquote></li></ul></li><li><p><strong>30、“心有猛虎，细嗅蔷薇”是由哪位诗人由英文翻译至中文的？</strong></p><ul><li>A.余秋雨  B.郭沫若  <font color="red">C.余光中</font><blockquote><p>心有猛虎，细嗅蔷薇。是英国诗人西格里夫·萨松代表作《于我，过去，现在以及未来 》的经典诗句。原话是“In me the tiger sniffs the rose.”诗人余光中将其翻译为：心有猛虎，细嗅蔷薇。意思是，老虎也会有细嗅蔷薇的时候，忙碌而远大的雄心也会被温柔和美丽折服，安然感受美好。讲的是人性中阳刚与阴柔的两面。</p></blockquote></li></ul></li><li><p><strong>31、在三倍放大镜下，三角板角的度数会怎样变化？</strong></p><ul><li><font color="red">A.角度不变</font>  B.放到三倍  C.放大一倍<blockquote><p>放大镜下奇异见,角的度数仍不变</p></blockquote></li></ul></li><li><p><strong>32、10以内的质数有多少个？</strong></p><ul><li><font color="red">A.4个</font>  B.5个  C.6个<blockquote><p>质数又称素数.指在一个大于1的自然数中,除了1和此整数自身外,没法被其他自然数整除的数.换句话说,只有两个正因数（1和自己）的自然数即为素数.比1大但不是素数的数称为合数.1和0既非素数也非合数.素数在数论中有着很重要的地位.十以内的质数有2,3,5,7</p></blockquote></li></ul></li><li><p><strong>33、测量人体体温的部位中，最接近人实际体温的是？</strong></p><ul><li>A.口腔温度  B.腋下温度  <font color="red">C.直肠温度</font><blockquote><p>体温测量主要指标有三部分：分别是口腔温度、腋下温度和直肠温度．最接近体温的地方是直肠温度．由于身体内部的温度不容易测量，所以临床上常以口腔、腋窝和直肠的温度来代表体温．正常人的口腔温度为36.7～37.7℃（平均为37.2℃），腋窝温度为36.0～37.4℃（平均为36.8℃），直肠温度为36.9～37.9℃（平均为37.5℃）．其中直肠温度最接近人体内部的温度，但测量不方便，因此大多采用腋下和口腔测量．</p></blockquote></li></ul></li><li><p><strong>34、北京大学的第一任校长是谁？</strong></p><ul><li><font color="red">A.严复</font>  B.蔡元培  C.胡适<blockquote><p>1898年8月9日，“京师大学堂”成立，孙家鼐为第一任管学大臣，被聘为总教习。1912年5月，“京师大学堂”改名“北京大学”，著名的教育家、启蒙思想家严复出任北京大学第一任校长。 </p></blockquote></li></ul></li><li><p><strong>35、“臭鳜鱼”是哪个省的著名菜肴？</strong></p><ul><li><font color="red">A.安徽省</font>  B.湖北省  C.江西省<blockquote><p>臭鳜鱼是安徽省汉族传统名菜，徽州菜代表之一，流行于徽州一府六县各地。</p></blockquote></li></ul></li><li><p><strong>36、唐宋八大家中有几个唐朝人？</strong></p><ul><li><font color="red">A.2</font>  B.3  C.4<blockquote><p>除韩愈、柳宗元是唐朝人以外、曾巩、欧阳修、苏轼、苏辙、苏洵、王安石都是宋朝</p></blockquote></li></ul></li><li><p><strong>37、每到春天，柳絮就会漫天飞舞，那么柳絮其实是柳树的什么？</strong></p><ul><li><font color="red">A.种子</font>  B.茎  C.花<blockquote><p>柳絮又叫柳棉,其实就是柳树的种子。每年三四月,柳絮随风飘起。多的时候,漫天飞舞,像雪花一样。</p></blockquote></li></ul></li><li><p><strong>38、北京大学的前身是？</strong></p><ul><li>A.国子监  <font color="red">B.京师大学堂</font>  C.北洋大学<blockquote><ol><li>国子监是宋、元、明、清三代国家设立的最高学府和教育行政管理机构，又称“太学”“国学”。</li><li>京师大学堂,是北京大学在清末1898年至1911年间的曾用名,是中国近代第一所国立大学，其成立标志着中国近代国立高等教育的开端。1912年5月4日，京师大学堂更名为北京大学 ，旋即冠“国立”，是中国历史上第一所冠名“国立”的大学。</li><li>北洋大学（Imperial Tientsin University Peiyang University）是中国近代第一所现代大学，1951年北洋大学正式更名为天津大学。</li></ol></blockquote></li></ul></li><li><p><strong>39、著名的元素周期表是谁发现的？</strong></p><ul><li><font color="red">A.门捷列夫</font>  B.居里夫人  C.泡利<blockquote><p>化学的发展：</p><ul><li>1.我国商代有了青铜器，春秋晚期能炼铁，战国时期能炼钢，唐代有了火药。 </li><li>2.1774年法国化学家拉瓦锡提出了空气主要是由氧气和氮气组成的。</li><li>3.瑞典化学家舍勒和英国化学家普利斯特里先后用不同的方法制得了氧气。 </li><li>4.1776年俄国化学家罗蒙诺索夫建立了质量守恒定律。 </li><li>5.十九世纪初英国科学家道尔顿提出了近代原子学说。 </li><li>6.1811年意大利科学家阿佛加德罗提出了分子的概念。</li><li>7.1869年俄国化学家门捷列夫发现了元素周期律。</li></ul></blockquote></li></ul></li><li><p><strong>40、以下哪句话出自于《兰亭集序》？</strong></p><ul><li><font color="red">A.群贤毕至，少长咸集</font>  B.朝晖夕阴，气象万千  C.时维九月，序属三秋<blockquote><p>“群贤毕至，少长咸集”出自《兰亭集序》王羲之<br>“朝晖夕阴，气象万千”出自《岳阳楼记》范仲淹<br>“时维九月，序属三秋”出自《滕王阁序》王勃</p></blockquote></li></ul></li><li><p><strong>41、以下哪一种动物不属于鸟类？</strong></p><ul><li>A.鸵鸟  <font color="red">B.蝙蝠</font>  C.企鹅<blockquote><p>蝙蝠和家鹅、孔雀、猫头鹰都能在空中飞行，但它们不同类，多数鸟类营飞行生活，家鹅、孔雀、猫头鹰其结构特征总是与其生活相适应的．如体表被羽毛，前肢变成翼，适于飞行；身体呈流线型，可以减少飞行时的阻力；体内有气囊，辅助肺完成双重呼吸，可以供给充足的氧气；有的骨中空，有的骨愈合，直肠很短，能减轻体重；胸肌发达，利于牵动两翼完成飞行动作．蝙蝠的生殖特点是：胎生、哺乳，属于哺乳动物</p></blockquote></li></ul></li><li><p><strong>42、以下哪位不属于“竹林七贤”？</strong></p><ul><li>A.山涛  <font color="red">B.卫玠</font>  C.嵇康<blockquote><p>魏正始年间(240-249)，嵇康、阮籍、山涛、向秀、刘伶、王戎及阮咸七人，常在当时的山阳县（今河南辉县、修武一带）竹林之下，喝酒、纵歌，肆意酣畅，世谓竹林七贤。</p></blockquote></li></ul></li><li><p><strong>43、以下哪一年不是闰年？</strong></p><ul><li>A.1600年  <font color="red">B.1800年</font>  C.1964年<blockquote><p>用那一个年份÷4，如果正好除完，那一年就是闰年，除不完就是平年。注意：如果那一年的年份是整百数的话，那就100％可以除完，但不一定都是闰年。这时，那就需要除以400，再看看能不能除尽。</p></blockquote></li></ul></li><li><p><strong>44、世界上面积最大的湖是哪一个？</strong></p><ul><li><font color="red">A.里海</font>  B.贝加尔湖  C.苏必利尔湖<blockquote><p>里海是世界上最大的咸水湖，位于欧洲和亚洲的内陆交界处，面积最大的淡水湖则是北美洲的苏必利尔湖。贝加尔湖是世界第一深湖，位于俄罗斯东西伯利亚南部</p></blockquote></li></ul></li><li><p><strong>45、晒太阳能够合成以下哪种物质？</strong></p><ul><li>A.维生素B  B.钙  <font color="red">C.维生素D</font><blockquote><p>有资料表明晒太阳能延缓衰老，主要作用的是维生素D。</p></blockquote></li></ul></li><li><p><strong>46、以下哪个数字最大？</strong></p><ul><li><font color="red">A.自然常数e</font>  B.根号7  C.lg100<blockquote><p>自然常数e约为2.71828，根号7约为2.64575，lg100等于2。</p></blockquote></li></ul></li><li><p><strong>47、天然气的主要成分是什么？</strong></p><ul><li>A.气体乙醇 <font color="red">B.甲烷</font> C.甲醛</li></ul></li></ul><ul><li><p><strong>48、空气中含量最多的气体是什么？</strong></p><ul><li><font color="red">A.氮气</font> B.氧气 C.惰性气体<blockquote><p>氮气，化学式为N2，通常状况下是一种无色无味的气体，而且一般氮气比空气密度小。氮气占大气总量的78.08%，是空气的主要成份。</p></blockquote></li></ul></li><li><p><strong>49、我国水量第二大的河流是哪条河？</strong></p><ul><li>A.黑龙江 B.黄河 <font color="red">C.珠江</font><blockquote><ul><li>我国水量最大的河流是长江，水量第二大的是珠江</li><li>中国是世界上河流最多的国家之一,最出名的还是这十条河流分别是长江、珠江、黄河、黑龙江、松花江、辽河、雅鲁藏布江、澜沧江、怒江、汉江。</li></ul></blockquote></li></ul></li><li><p><strong>50、PH值定义液体的酸碱性，那PH低于多少的雨水叫酸雨？</strong></p><ul><li>A.7 B.6. 4 <font color="red">C.5.6</font></li></ul></li></ul><ul><li><p><strong>51、奥运会举办时长不得超过多少天？</strong></p><ul><li><font color="red">A.16天</font> B.18天 C.20天<blockquote><p>国际奥委会在奥林匹克宪章上规定，夏季奥运会的举办时间不得超过16天，冬季奥运会限时为12天。</p></blockquote></li></ul></li><li><p><strong>52、“运筹帷幄之中，决胜千里之外”是评价哪个人物的？</strong></p><ul><li><font color="red">A.张良</font> B.诸葛亮 C.刘伯温<blockquote><p>汉高祖刘邦对张良的评价</p></blockquote></li></ul></li><li><p><strong>53、足球由黑、白相间组成，那它共有几块皮？</strong></p><ul><li>A.28 <font color="red">B.32</font> C.36</li></ul></li></ul><ul><li><p><strong>54、自由女神像是由哪个国家建造的？</strong></p><ul><li>A.意大利 B.美国 <font color="red">C.法国</font></li></ul></li></ul><ul><li><p><strong>55、我们常说能量守恒，那台风、闪电等天气的能量来源去哪里呢？</strong></p><ul><li>A.地球自转 B.月亮 <font color="red">C.太阳</font></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/pasted-4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;百万英雄重点题目及答案&quot;&gt;&lt;a href=&quot;#百万英雄重点题目及答案&quot; class=&quot;headerlink&quot; title=&quot;百万英雄重点题目及答案&quot;&gt;&lt;/a&gt;百万英雄重点
      
    
    </summary>
    
      <category term="百万英雄" scheme="https://llwanran.github.io/categories/%E7%99%BE%E4%B8%87%E8%8B%B1%E9%9B%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript常用的设计模式</title>
    <link href="https://llwanran.github.io/posts/1842989949.html"/>
    <id>https://llwanran.github.io/posts/1842989949.html</id>
    <published>2018-01-22T01:56:00.000Z</published>
    <updated>2018-07-11T05:01:00.825Z</updated>
    
    <content type="html"><![CDATA[<h6 id="使用ES6实现"><a href="#使用ES6实现" class="headerlink" title="使用ES6实现"></a>使用ES6实现</h6><h1 id="设计模式分为三种类型，共23种"><a href="#设计模式分为三种类型，共23种" class="headerlink" title="设计模式分为三种类型，共23种"></a>设计模式分为三种类型，共23种</h1><ul><li>创建型模式：<a href="#Signleton">单例模式</a>、<a href="#AbstractFactory">抽象工厂模式</a>、<a href="#Builder">建造者模式</a>、<a href="#Factory">工厂模式</a>、<a href="#Prototype">原型模式</a>。</li><li>结构型模式：<a href="#Adapter">适配器模式</a>、<a href="#Bridge">桥接模式</a>、<a href="#Decorator">装饰模式</a>、<a href="#Composite">组合模式</a>、<a href="#Facade">外观模式</a>、<a href="#Flyweight">享元模式</a>、<a href="#Proxy">代理模式</a>。</li><li>行为型模式：<a href="#Template_Method">模版方法模式</a>、<a href="#Command">命令模式</a>、<a href="#Iterator">迭代器模式</a>、<a href="#Observer">观察者模式</a>、<a href="#Mediator">中介者模式</a>、<a href="#Memento">备忘录模式</a>、<a href="#Interpreter">解释器模式（Interpreter模式）</a>、<a href="#State">状态模式</a>、<a href="#Strategy">策略模式</a>、<a href="#Chain_Of_Responsibility">职责链模式(责任链模式)</a>、<a href="#Visitor">访问者模式</a>。</li></ul><h3 id="创建型模式："><a href="#创建型模式：" class="headerlink" title="创建型模式："></a>创建型模式：</h3><ul><li><a name="Signleton">Signleton（单例模式）：</a>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Signleton.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Singleton.prototype.Instance === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">            Singleton.prototype.Instance = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Singleton.prototype.Instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ob1 = <span class="keyword">new</span> Singleton(<span class="string">"one"</span>);</span><br><span class="line"><span class="keyword">let</span> ob2 = <span class="keyword">new</span> Singleton(<span class="string">"two"</span>);</span><br><span class="line"><span class="keyword">let</span> ob3 = <span class="keyword">new</span> Singleton(<span class="string">"Three"</span>);</span><br><span class="line">ob2.init = <span class="string">'Object flg'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ob1 === ob2);</span><br><span class="line"><span class="built_in">console</span>.log(ob1 === ob3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ob1);</span><br><span class="line"><span class="built_in">console</span>.log(ob2);</span><br><span class="line"><span class="built_in">console</span>.log(ob3);</span><br></pre></td></tr></table></figure><ul><li><a name="AbstractFactory">AbstractFactory（抽象工厂模式）：</a>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"># AbstractFactory.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"AbstractFactory class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createProductA(product) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"AbstractFactory.createProductA created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createProductB(product) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"AbstractFactory.createProductB created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteFactory1 class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createProductA(product) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory1 createProductA'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createProductB(product) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory1 createProductB'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteFactory2 class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createProductA(product) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory2 createProductA'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createProductB(product) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory2 createProductB'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractProductA class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractProductB class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductA1 class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductA2 class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductB1 class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductB2 class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> factory1 = <span class="keyword">new</span> ConcreteFactory1();</span><br><span class="line"><span class="keyword">var</span> productB1 = factory1.createProductB();</span><br><span class="line"><span class="keyword">var</span> productA1 = factory1.createProductA();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> factory2 = <span class="keyword">new</span> ConcreteFactory2();</span><br><span class="line"><span class="keyword">var</span> productA2 = factory2.createProductA();</span><br><span class="line"><span class="keyword">var</span> productB2 = factory2.createProductB();</span><br></pre></td></tr></table></figure><ul><li><a name="Builder">Builder（建造者模式）：</a>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># Builder.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Builder Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildPart(partName) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Builder.buildPart invoked!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteBuilder Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildPart(partName) &#123;</span><br><span class="line">        <span class="keyword">super</span>.buildPart(partName);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteBuilder.buildPart invoked!'</span>);</span><br><span class="line">        <span class="keyword">this</span>.product = <span class="keyword">new</span> Product(partName);</span><br><span class="line">    &#125;</span><br><span class="line">    getResult() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteBuilder.getResult invoked!'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(material) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Product class created"</span>);</span><br><span class="line">        <span class="keyword">this</span>.data = material</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.structure = [<span class="string">'Prod1'</span>, <span class="string">'Prod2'</span>, <span class="string">'Prod3'</span>];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Director class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    construct() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Director.Construct created"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prodName <span class="keyword">in</span> <span class="keyword">this</span>.structure) &#123;</span><br><span class="line">            <span class="keyword">let</span> builder = <span class="keyword">new</span> ConcreteBuilder();</span><br><span class="line">            builder.buildPart(<span class="keyword">this</span>.structure[prodName]);</span><br><span class="line">            builder.getResult();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> director = <span class="keyword">new</span> Director();</span><br><span class="line">director.construct();</span><br></pre></td></tr></table></figure><ul><li><a name="Factory">Factory（工厂模式）：</a>定义一个用于创建对象的接口，让子类决定将哪一个类实例化。Factory Method使一个类的实例化延迟到其子类。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># Factory.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Product Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteProduct Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    factoryMethod() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator.factoryMethod created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    anOperation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator.anOperation created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.product = <span class="keyword">this</span>.factoryMethod();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.product <span class="keyword">instanceof</span> ConcreteProduct);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteCreator Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    factoryMethod() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> factory = <span class="keyword">new</span> ConcreteCreator();</span><br><span class="line">factory.anOperation();</span><br></pre></td></tr></table></figure><ul><li><a name="Prototype">Prototype（原型模式）：</a>用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"># Prototype.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(prototype) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Prototype Class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setFeature(key, val) &#123;</span><br><span class="line">        <span class="keyword">this</span>[key] = val</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clone() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Prototype.clone invoked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype1</span> <span class="keyword">extends</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype1 created"</span>);</span><br><span class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 1"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clone() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcretePrototype1.clone invoked'</span>);</span><br><span class="line">        <span class="keyword">let</span> clone = <span class="keyword">new</span> ConcretePrototype1();</span><br><span class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        keys.forEach(<span class="function"><span class="params">k</span> =&gt;</span> clone.setFeature(k, <span class="keyword">this</span>[k]));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype1 cloned"</span>);</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype2</span> <span class="keyword">extends</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype2 created"</span>);</span><br><span class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 2"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clone() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcretePrototype2.Clone function'</span>);</span><br><span class="line">        <span class="keyword">let</span> clone = <span class="keyword">new</span> ConcretePrototype2();</span><br><span class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        keys.forEach(<span class="function"><span class="params">k</span> =&gt;</span> clone.setFeature(k, <span class="keyword">this</span>[k]));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype2 cloned"</span>);</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proto1 = <span class="keyword">new</span> ConcretePrototype1();</span><br><span class="line">proto1.setFeature(<span class="string">'feature'</span>, <span class="string">"feature 11"</span>);</span><br><span class="line"><span class="keyword">var</span> clone1 = proto1.clone();</span><br><span class="line"><span class="built_in">console</span>.log(clone1.feature);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> clone1);</span><br><span class="line"><span class="built_in">console</span>.log(clone1 === proto1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proto2 = <span class="keyword">new</span> ConcretePrototype2();</span><br><span class="line">proto2.setFeature(<span class="string">'feature'</span>, <span class="string">"feature 22"</span>);</span><br><span class="line"><span class="keyword">var</span> clone2 = proto2.clone();</span><br><span class="line"><span class="built_in">console</span>.log(clone2.feature);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> clone2);</span><br><span class="line"><span class="built_in">console</span>.log(clone2 === proto2);</span><br></pre></td></tr></table></figure><h3 id="结构型模式："><a href="#结构型模式：" class="headerlink" title="结构型模式："></a>结构型模式：</h3><ul><li><a name="Adapter">Adapter（适配器模式）：</a>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># Adapter.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(type) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Target Class created!'</span>);</span><br><span class="line">        <span class="keyword">let</span> result = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'adapter'</span>:</span><br><span class="line">                result = <span class="keyword">new</span> AdapterImpl();</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                result = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Target.request invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Adapter Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    specificRequest() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Adapter.specificRequest invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdapterImpl</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AdapterImpl Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AdapterImpl.request invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Target(<span class="string">"adapter"</span>);</span><br><span class="line">f.request();</span><br></pre></td></tr></table></figure><ul><li><a name="Bridge">Bridge（桥接模式）：</a>将抽象部分与它的实现部分分离，使它们都可以独立地变化。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># Bridge.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Abstraction Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Abstraction.operation invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.imp.operationImp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'RefinedAbstraction Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setImp(imp) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'RefinedAbstraction.setImp invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.imp = imp</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Implementor Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operationImp() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Implementor.operationImp invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorA Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operationImp() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorA.operationImp invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorB</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorB Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operationImp() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorB.operationImp invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> abstraction = <span class="keyword">new</span> RefinedAbstraction();</span><br><span class="line">abstraction.setImp(<span class="keyword">new</span> ConcreteImplementorA());</span><br><span class="line">abstraction.operation();</span><br><span class="line">abstraction.setImp(<span class="keyword">new</span> ConcreteImplementorB());</span><br><span class="line">abstraction.operation();</span><br></pre></td></tr></table></figure><ul><li><a name="Composite">Composite（组合模式）：</a>将对象组合成树形结构以表示“部分-整体”的层次结构。它使得客户对单个对象和复合对象的使用具有一致性。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"># Composite.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.operation invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(Component) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.add invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(Component) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.remove invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getChild(key) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.getChild invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Leaf Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Leaf.operation invoked'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.children = [];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite operation for: '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.children) &#123;</span><br><span class="line">            <span class="keyword">this</span>.children[i].operation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(Component) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite.add invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.children.push(Component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove(Component) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite.remove invoked'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.children[i] === Component) &#123;</span><br><span class="line">                <span class="keyword">this</span>.children.splice(i, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getChild(key) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite.getChild invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.children[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> composite1 = <span class="keyword">new</span> Composite(<span class="string">'C1'</span>);</span><br><span class="line">composite1.add(<span class="keyword">new</span> Leaf(<span class="string">'L1'</span>));</span><br><span class="line">composite1.add(<span class="keyword">new</span> Leaf(<span class="string">'L2'</span>));</span><br><span class="line"><span class="keyword">var</span> composite2 = <span class="keyword">new</span> Composite(<span class="string">'C2'</span>);</span><br><span class="line">composite2.add(composite1);</span><br><span class="line">composite1.getChild(<span class="number">1</span>).operation();</span><br><span class="line">composite2.operation();</span><br></pre></td></tr></table></figure><ul><li><a name="Decorator">Decorator（装饰模式）：</a>动态地给一个对象添加一些额外的职责。就扩展功能而言， 它比生成子类方式更为灵活。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"># Decorator.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.operation invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteComponent Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteComponent.operation invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(component) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.component = component;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Decorator Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Decorator.operation invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.component.operation()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(component, sign) &#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">        <span class="keyword">this</span>.addedState = sign;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorA Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="keyword">super</span>.operation();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorA.operation invoked'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.addedState)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorB</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(component, sign) &#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">        <span class="keyword">this</span>.addedState = sign;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorB Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation() &#123;</span><br><span class="line">        <span class="keyword">super</span>.operation();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorB.operation invoked'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addedBehavior() &#123;</span><br><span class="line">        <span class="keyword">this</span>.operation();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorB.operation invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> ConcreteComponent();</span><br><span class="line"><span class="keyword">var</span> decoratorA = <span class="keyword">new</span> ConcreteDecoratorA(component, <span class="string">'decoratorA'</span>);</span><br><span class="line"><span class="keyword">var</span> decoratorB = <span class="keyword">new</span> ConcreteDecoratorB(component, <span class="string">'decoratorB'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'component: '</span>);</span><br><span class="line">component.operation();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'decoratorA: '</span>);</span><br><span class="line">decoratorA.operation();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'decoratorB: '</span>);</span><br><span class="line">decoratorB.addedBehavior();</span><br></pre></td></tr></table></figure><ul><li><a name="Facade">Facade（外观模式）：</a>为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"># Facade.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Facade class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gotoPage(dp) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (dp) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Facade"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Facade"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"AbstractFactory"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the AbstractFactory"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Builder"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Builder"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Factory"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Factory"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Prototype"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Prototype"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Singleton"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Singleton"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Adapter"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Adapter"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Bridge"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Bridge"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Composite"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Composite"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Decorator"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Decorator"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Flyweight"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Flyweight"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Proxy"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Proxy"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"ChainofResponsibility"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the ChainofResponsibility"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Command"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Command"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Interpreter"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Interpreter"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Iterator"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Iterator"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Mediator"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Mediator"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Memento"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Memento"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Observer"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Observer"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"State"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the State"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Strategy"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Strategy"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"TemplateMethod"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the TemplateMethod"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Visitor"</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Visitor"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"nothing to be matched"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> facade = <span class="keyword">new</span> Facade();</span><br><span class="line">facade.gotoPage(<span class="string">'Facade'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'AbstractFactory'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Builder'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Factory'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Prototype'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Singleton'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Adapter'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Bridge'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Composite'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Decorator'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Flyweight'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Proxy'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'ChainofResponsibility'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Command'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Interpreter'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Iterator'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Mediator'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Memento'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Observer'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'State'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Strategy'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'TemplateMethod'</span>);</span><br><span class="line">facade.gotoPage(<span class="string">'Visitor'</span>);</span><br></pre></td></tr></table></figure><ul><li><a name="Flyweight">Flyweight（享元模式）：</a>运用共享技术有效地支持大量细粒度的对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"># Flyweight.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.flyweights = &#123;&#125;;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'FlyweightFactory Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getFlyweight(key) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'FlyweightFactory.getFlyweight invoked'</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.flyweights[key]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.flyweights[key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.flyweights[key] = <span class="keyword">new</span> ConcreteFlyweight(key);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.flyweights[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createGibberish(keys) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'FlyweightFactory.createGibberish invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UnsharedConcreteFlyweight(keys, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Flyweight Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation(extrinsicState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Flyweight.operation invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(key) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.intrinsicState = key;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFlyweight Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation(extrinsicState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFlyweight.operation invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> extrinsicState + <span class="keyword">this</span>.intrinsicState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(keys, flyweights) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.flyweights = flyweights;</span><br><span class="line">        <span class="keyword">this</span>.keys = keys;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'UnsharedConcreteFlyweight Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operation(extrinsicState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'UnsharedConcreteFlyweight.operation invoked'</span>);</span><br><span class="line">        <span class="keyword">var</span> key, word = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; extrinsicState; i++) &#123;</span><br><span class="line">            key = <span class="keyword">this</span>.keys[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="keyword">this</span>.keys.length))];</span><br><span class="line">            word = <span class="keyword">this</span>.flyweights.getFlyweight(key).operation(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'UnsharedConcreteFlyweight Operation: '</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(word);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flyweights = <span class="keyword">new</span> FlyweightFactory();</span><br><span class="line"><span class="keyword">var</span> gibberish = flyweights.createGibberish([<span class="string">'-'</span>, <span class="string">'+'</span>, <span class="string">'*'</span>]);</span><br><span class="line">gibberish.operation(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><ul><li><a name="Proxy">Proxy（（代理模式）：</a>为其他对象提供一个代理以控制对这个对象的访问。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># Proxy.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject.request invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'RealSubject Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'RealSubject.request invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Proxy Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">        <span class="keyword">this</span>.realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        <span class="keyword">this</span>.realSubject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>()</span><br><span class="line">proxy.request()</span><br></pre></td></tr></table></figure><h3 id="行为型模式："><a href="#行为型模式：" class="headerlink" title="行为型模式："></a>行为型模式：</h3><ul><li><a name="Chain_Of_Responsibility">Chain of Responsibility（责任链模式）：</a>为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># Chain of Responsibility.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Handler Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleRequest() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Handler.handleRequest invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler1 Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setSuccessor(successor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler1.setSuccessor invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleRequest(request) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler1.handleRequest invoked'</span>);</span><br><span class="line">        <span class="keyword">if</span> (request === <span class="string">'run'</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler1 has handled the request'</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler1 calls his successor'</span>);</span><br><span class="line">            <span class="keyword">this</span>.successor.handleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler2 Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleRequest(request) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteHandler2.handleRequest invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handle1 = <span class="keyword">new</span> ConcreteHandler1();</span><br><span class="line"><span class="keyword">let</span> handle2 = <span class="keyword">new</span> ConcreteHandler2();</span><br><span class="line">handle1.setSuccessor(handle2);</span><br><span class="line">handle1.handleRequest(<span class="string">'run'</span>);</span><br><span class="line">handle1.handleRequest(<span class="string">'stay'</span>);</span><br></pre></td></tr></table></figure><ul><li><a name="Command">Command（命令模式）：</a>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># Command.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Invoker Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    storeCommand(command) &#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Invoker.storeCommand invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Command Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    execute() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Command.execute invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(receiver, state) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteCommand Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    execute() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteCommand.execute invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Receiver Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    action() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Receiver.action invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line"><span class="keyword">var</span> receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line"><span class="keyword">var</span> command = <span class="keyword">new</span> ConcreteCommand(receiver);</span><br><span class="line">invoker.storeCommand(command);</span><br><span class="line">invoker.command.execute();</span><br></pre></td></tr></table></figure><ul><li><a name="Interpreter">Interpreter（解释器模式）：</a>给定一个语言, 定义它的文法的一种表示，并定义一个解释器, 该解释器使用该表示来解释语言中的句子。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"># Interpreter.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(input) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.list = [];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(eps) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.add invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.list.push(eps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getList() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.getList invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getSum() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.getSum invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setSum(_sum) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sum = _sum;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.setSum invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractExpression Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interpret(context) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractExpression.interpret invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlusExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'PlusExpression Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interpret(context) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'PlusExpression.interpret invoked'</span>);</span><br><span class="line">        <span class="keyword">var</span> sum = context.getSum();</span><br><span class="line">        sum++;</span><br><span class="line">        context.setSum(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinusExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'+'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'MinusExpression Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interpret(context) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'MinusExpression.interpret invoked'</span>);</span><br><span class="line">        <span class="keyword">var</span> sum = context.getSum();</span><br><span class="line">        sum--;</span><br><span class="line">        context.setSum(sum)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> Context();</span><br><span class="line">context.setSum(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">context.add(<span class="keyword">new</span> PlusExpression());</span><br><span class="line">context.add(<span class="keyword">new</span> PlusExpression());</span><br><span class="line">context.add(<span class="keyword">new</span> PlusExpression());</span><br><span class="line"></span><br><span class="line">context.add(<span class="keyword">new</span> MinusExpression());</span><br><span class="line">context.add(<span class="keyword">new</span> MinusExpression());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = context.getList();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> expression = list[i];</span><br><span class="line">    expression.interpret(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Result："</span> + context.getSum());</span><br></pre></td></tr></table></figure><ul><li><a name="Iterator">Iterator（迭代器模式）：</a>提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"># Iterator.js</span><br><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    first() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator.first invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator.next invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isDone() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator.isDone invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentItem() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator.currentItem invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">extends</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(aggregate) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.aggregate = aggregate;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteIterator Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    first() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteIterator.first invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.aggregate.list[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteIterator.next invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.index += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.aggregate.list[<span class="keyword">this</span>.index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentItem() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteIterator.currentItem invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.aggregate.list[<span class="keyword">this</span>.index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Aggregate Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createIterator() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Aggregate.CreateIterator invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">extends</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(list) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteAggregate Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createIterator() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteAggregate.CreateIterator invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.iterator = <span class="keyword">new</span> ConcreteIterator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aggregate = <span class="keyword">new</span> ConcreteAggregate([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]);</span><br><span class="line">aggregate.createIterator();</span><br><span class="line"><span class="built_in">console</span>.log(aggregate.iterator.first());</span><br><span class="line"><span class="built_in">console</span>.log(aggregate.iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(aggregate.iterator.currentItem());</span><br></pre></td></tr></table></figure><ul><li><a name="Mediator">Mediator（中介者模式）：</a>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"># Mediator.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Mediator Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    colleagueChanged(colleague) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Mediator.colleagueChanged invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteMediator Class created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.colleague1 = <span class="keyword">new</span> ConcreteColleague1(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.colleague2 = <span class="keyword">new</span> ConcreteColleague2(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    colleagueChanged(colleague) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteMediator.colleagueChanged invoked'</span>);</span><br><span class="line">        <span class="keyword">switch</span> (colleague) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">this</span>.colleague1:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague1 has Changed -&gt; change ConcreteColleague2.feature: '</span>);</span><br><span class="line">                <span class="keyword">this</span>.colleague2.setFeature(<span class="string">'new feature 2'</span>);</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">this</span>.colleague2:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague2 has Changed, but do nothing'</span>);</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Do nothing'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Colleague Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    changed() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Colleague.changed invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.mediator.colleagueChanged(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(mediator) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague1 Class created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setFeature(feature) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague1.setFeature invoked'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague1 Feature has changed from '</span> + <span class="keyword">this</span>.feature + <span class="string">' to '</span> + feature)</span><br><span class="line">        <span class="keyword">this</span>.feature = feature;</span><br><span class="line">        <span class="keyword">this</span>.changed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(mediator) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague2 Class created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setFeature(feature) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague2.setFeature invoked'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague2 Feature has changed from '</span> + <span class="keyword">this</span>.feature + <span class="string">' to '</span> + feature);</span><br><span class="line">        <span class="keyword">this</span>.feature = feature;</span><br><span class="line">        <span class="keyword">this</span>.changed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line">mediator.colleague1.setFeature(<span class="string">"new feature 1"</span>);</span><br></pre></td></tr></table></figure><ul><li><a name="Memento">Memento（备忘录模式）：</a>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"># Memento.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Originator Class created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">'a'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Originator created. State= '</span> + <span class="keyword">this</span>.state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setMemento(Memento) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Originator.setMemento invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.state = Memento.getState();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Originator.setMemento State= '</span> + <span class="keyword">this</span>.state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createMemento(state) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Originator.createMemento invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(state) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Memento Class created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Memento created. State= '</span> + <span class="keyword">this</span>.state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getState() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Memento.getState invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(state) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Memento.setState invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Caretaker Class created'</span>);</span><br><span class="line">        <span class="keyword">this</span>.mementos = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addMemento(memento) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Caretaker.addMemento invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.mementos.push(memento)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setMemento() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Caretaker.setMemento invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mementos[<span class="keyword">this</span>.mementos.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line"><span class="keyword">let</span> originator = <span class="keyword">new</span> Originator();</span><br><span class="line">caretaker.addMemento(originator.createMemento(<span class="string">'b'</span>));</span><br><span class="line">originator.setMemento(caretaker.setMemento());</span><br><span class="line"><span class="built_in">console</span>.log(originator.state);</span><br></pre></td></tr></table></figure><ul><li><a name="Observer">Observer（观察者模式）：</a>定义对象间的一种一对多的依赖关系,以便当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并自动刷新。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"># Observer.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    attach(observer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.push(observer);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject.attach invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dettach(observer) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject.dettach invoked'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.observers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.observers[i] === observer) &#123;</span><br><span class="line">                <span class="keyword">this</span>.observers.splice(i, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject.notify invoked'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.observers) &#123;</span><br><span class="line">            <span class="keyword">this</span>.observers[i].update(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.subjectState = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.observers = [];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteSubject Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getState() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteSubject.getState invoked'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.subjectState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(state) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteSubject.setState invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.subjectState = state;</span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Observer Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Observer.update invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.observerState = <span class="string">''</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteObserver Class created'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    update(Subject) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteObserver.update invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.observerState = Subject.getState();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Observer new state: '</span> + <span class="keyword">this</span>.observerState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> observer1 = <span class="keyword">new</span> ConcreteObserver();</span><br><span class="line"><span class="keyword">var</span> observer2 = <span class="keyword">new</span> ConcreteObserver();</span><br><span class="line"><span class="keyword">var</span> subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">subject.attach(observer1);</span><br><span class="line">subject.attach(observer2);</span><br><span class="line">subject.setState(<span class="string">'state 1'</span>);</span><br></pre></td></tr></table></figure><ul><li><a name="State">State（状态模式）：</a>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"># State.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(state) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Context Class created"</span>);</span><br><span class="line">        <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">                <span class="keyword">this</span>.state = <span class="keyword">new</span> ConcreteStateA()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">                <span class="keyword">this</span>.state = <span class="keyword">new</span> ConcreteStateB()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">this</span>.state = <span class="keyword">new</span> ConcreteStateA()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.request invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.state.handle(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"State Class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handle() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'State.handle invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteStateA Class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handle(context) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStateA.handle invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteStateB Class created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handle(context) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStateB.handle invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> context = <span class="keyword">new</span> Context(<span class="string">"A"</span>)</span><br><span class="line">context.request()</span><br></pre></td></tr></table></figure><ul><li><a name="Strategy">Strategy（策略模式）：</a>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># Strategy.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(type) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context Class created!'</span>);</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">                <span class="keyword">this</span>.strategy = <span class="keyword">new</span> ConcreteStrategyA()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">                <span class="keyword">this</span>.strategy = <span class="keyword">new</span> ConcreteStrategyB()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">this</span>.strategy = <span class="keyword">new</span> ConcreteStrategyA()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    contextInterface() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.contextInterface invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.strategy.algorithmInterface()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Strategy Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    algorithmInterface() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Strategy.algorithmInterface invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStrategyA Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    algorithmInterface() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStrategyA.algorithmInterface invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStrategyB Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    algorithmInterface() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStrategyB.algorithmInterface invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> contextA = <span class="keyword">new</span> Context(<span class="string">"A"</span>);</span><br><span class="line">contextA.contextInterface();</span><br><span class="line"><span class="keyword">let</span> contextB = <span class="keyword">new</span> Context(<span class="string">"B"</span>);</span><br><span class="line">contextB.contextInterface();</span><br></pre></td></tr></table></figure><ul><li><a name="Template_Method">Template Method（模版方法模式）：</a>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># Template Method.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractClass Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    templateMethod() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractClass.templateMethod invoked'</span>);</span><br><span class="line">        <span class="keyword">this</span>.primitiveOperation1();</span><br><span class="line">        <span class="keyword">this</span>.primitiveOperation2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    primitiveOperation1() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractClass.primitiveOperation1 invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    primitiveOperation2() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractClass.primitiveOperation2 invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteClass Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    primitiveOperation1() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteClass.primitiveOperation1 invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    primitiveOperation2() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteClass.primitiveOperation2 invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> ConcreteClass();</span><br><span class="line">obj.templateMethod();</span><br></pre></td></tr></table></figure><ul><li><a name="Visitor">Visitor（访问者模式）：</a>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"># Visitor.js</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Visitor Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visitConcreteElementA(ConcreteElementA) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Visitor.visitConcreteElementA invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visitConcreteElementB(ConcreteElementB) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Visitor.visitConcreteElementB invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor1</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteVisitor1 Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visitConcreteElementA(ConcreteElementA) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteVisitor1.visitConcreteElementA invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visitConcreteElementB(ConcreteElementB) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteVisitor1.visitConcreteElementB invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor2</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteVisitor2 Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visitConcreteElementA(ConcreteElementA) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteVisitor2.visitConcreteElementA invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visitConcreteElementB(ConcreteElementB) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteVisitor2.visitConcreteElementB invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ObjectStructure Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Element Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Accept(visitor) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Element.visitConcreteElementB invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteElementA Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    accept(visitor) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteElementA.accept invoked'</span>);</span><br><span class="line">        visitor.visitConcreteElementA(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operationA() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteElementA.operationA invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementB</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteElementB Class created!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    accept(visitor) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteElementB.accept invoked'</span>);</span><br><span class="line">        visitor.visitConcreteElementB(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    operationB() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteElementB.operationB invoked'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> visitor1 = <span class="keyword">new</span> ConcreteVisitor1();</span><br><span class="line"><span class="keyword">let</span> visitor2 = <span class="keyword">new</span> ConcreteVisitor2();</span><br><span class="line"><span class="keyword">let</span> elementA = <span class="keyword">new</span> ConcreteElementA();</span><br><span class="line"><span class="keyword">let</span> elementB = <span class="keyword">new</span> ConcreteElementB();</span><br><span class="line">elementA.accept(visitor1);</span><br><span class="line">elementB.accept(visitor2);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;使用ES6实现&quot;&gt;&lt;a href=&quot;#使用ES6实现&quot; class=&quot;headerlink&quot; title=&quot;使用ES6实现&quot;&gt;&lt;/a&gt;使用ES6实现&lt;/h6&gt;&lt;h1 id=&quot;设计模式分为三种类型，共23种&quot;&gt;&lt;a href=&quot;#设计模式分为三种类型，共23种&quot; c
      
    
    </summary>
    
      <category term="前端" scheme="https://llwanran.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="https://llwanran.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>PHP相关名词通俗解释</title>
    <link href="https://llwanran.github.io/posts/994796909.html"/>
    <id>https://llwanran.github.io/posts/994796909.html</id>
    <published>2018-01-16T05:31:00.000Z</published>
    <updated>2018-01-17T08:00:04.480Z</updated>
    
    <content type="html"><![CDATA[<h6 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h6><ul><li>CGI(Common Gateway Interface) 是为了保证web server传递过来的数据是标准格式的，方便CGI程序的编写者。</li><li>是个协议，跟进程什么的没关系。</li><li>可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。</li></ul><h6 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h6><ul><li>是用来提高CGI程序性能的。CGI程序反复加载是CGI性能低下的主要原因，如果CGI程序保持在内存中并接受FastCGI进程管理器调度，则可以提供良好的性能、伸缩性、Fail-Over特性等。</li><li>是常驻型的CGI，它可以一直运行，在请求到达时，不会花费时间去fork一个进程来处理。</li><li>是CGI的升级版，一种语言无关的协议，用来沟通程序(如PHP, Python, Java)和Web服务器(Apache2, Nginx), 理论上任何语言编写的程序都可以通过Fastcgi来提供Web服务。</li></ul><h6 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h6><ul><li>（FastCGI Process Manager）大家都知道，PHP的解释器是php-cgi。php-cgi只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理（皇上，臣妾真的做不到啊！）所以就出现了一些能够调度php-cgi进程的程序，比如说由lighthttpd分离出来的spawn-fcgi。好了PHP-FPM也是这么个东东，在长时间的发展后，逐渐得到了大家的认可（要知道，前几年大家可是抱怨PHP-FPM稳定性太差的），也越来越流行。</li><li>使用PHP-FPM来控制PHP-CGI的FastCGI进程。在没有PHP-FPM之前，是直接打开php-cgi.exe(win32)、php-cgi进程来处理fastcgi的请求的。或者是用spawn-fcgi或uwsgi类似的fastcgi进程管理软件。PHP-FPM的目的就是解决spawn-fcgi和uwsgi等类似管理器的缺陷，自php5.3以后版本开始被官方加入。</li></ul><h6 id="phpize"><a href="#phpize" class="headerlink" title="phpize"></a>phpize</h6><ul><li>是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块。</li><li>比如你想在原来编译好的php中加入memcached或者ImageMagick等扩展模块，可以使用phpize。</li></ul><h6 id="PECL"><a href="#PECL" class="headerlink" title="PECL"></a>PECL</h6><ul><li>PHP Extension Community Library，它管理着最底层的PHP扩展。这些扩展是用 C 写的。</li></ul><h6 id="PEAR"><a href="#PEAR" class="headerlink" title="PEAR"></a>PEAR</h6><ul><li>PHP Extension and Application Repository，它管理着项目环境的扩展。这些扩展是用 PHP 写的。</li></ul><h6 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h6><ul><li>PHP依赖管理的新时代</li><li>对于现代语言而言，包管理器基本上是标配。Java 有 Maven，Python 有 pip，Ruby 有 gem，Nodejs 有 npm。PHP 的则是 PEAR，不过 PEAR 坑不少：<blockquote><ol><li>依赖处理容易出问题</li><li>配置非常复杂</li><li>难用的命令行接口</li></ol></blockquote></li><li>好在我们有 Composer，PHP依赖管理的利器。它是开源的，使用起来也很简单，提交自己的包也很容易。</li></ul><h6 id="PSR"><a href="#PSR" class="headerlink" title="PSR"></a>PSR</h6><ul><li>PHP Standard Recommendations，由 PHP FIG 组织制定的 PHP 规范，是 PHP 开发的实践标准。</li><li>目前已表决通过了 6 套标准，已经得到大部分 PHP 框架的支持和认可。</li></ul><h6 id="SAPI"><a href="#SAPI" class="headerlink" title="SAPI"></a>SAPI</h6><ul><li>Server Application Programming Interface（服务端应用编程端口）</li><li>PHP通过SAPI提供了一组接口，供应用和PHP内核之间进行数据交互。</li></ul><h6 id="PHP-CLI"><a href="#PHP-CLI" class="headerlink" title="PHP CLI"></a>PHP CLI</h6><ul><li>从版本 4.3.0 开始，PHP 提供了一种新类型的 CLI SAPI支持，名为 CLI，意为 Command Line Interface，即命令行接口。</li><li>主要用作 PHP 的开发外壳应用。</li></ul><h6 id="影响-PHP-行为的扩展"><a href="#影响-PHP-行为的扩展" class="headerlink" title="影响 PHP 行为的扩展"></a>影响 PHP 行为的扩展</h6><ul><li><font color="red">APC</font> Alternative PHP Cache (可选 PHP 缓存)</li><li><font color="red">APCu</font> APC User Cache</li><li><font color="red">APD</font> Advanced PHP debugger</li><li><font color="red">bcompiler</font> PHP 字节码编译器</li><li><font color="red">BLENC</font> BLowfish ENCoder for PHP source scripts</li><li><font color="red">错误处理</font> 错误处理和日志记录</li><li><font color="red">htscanner</font> htaccess-like support for all SAPIs</li><li><font color="red">inclued</font> Inclusion hierarchy viewer</li><li><font color="red">Memtrack</font> 简单监视内存使用情况</li><li><font color="red">OPcache</font> 性能加速</li><li><font color="red">输出控制</font> 输出缓冲控制</li><li><font color="red">PHP 选项/信息</font></li><li><font color="red">runkit</font> official PECL PHP Runkit extension</li><li><font color="red">scream</font> Break the silence operator</li><li><font color="red">uopz</font> User Operations for Zend</li><li><font color="red">Weakref</font> Weak References</li><li><font color="red">WinCache</font> Windows Cache for PHP</li><li><font color="red">Xhprof</font> 层次式性能分析器</li></ul><hr><h3 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h3><p><strong>PHP Version 7.1.13</strong> - phpinfo() Configuration</p><ul><li>BCMath 任意精度数学[数学扩展]</li><li>Bzip2 用于透明地读写 bzip2（.bz2）压缩文件[压缩与归档扩展]</li><li>Calendar [日期与时间相关扩展]</li><li>Ctype 字符类型检测[变量与类型相关扩展]</li><li>cURL Client URL 库[其它服务]</li><li>DBA Database (dbm-style) Abstraction Layer[数据库抽象层]</li><li>DOM Document Object Model[XML 操作]</li><li>EXIF 可交换图像信息[图像生成和处理]</li><li>Fileinfo 文件信息[文件系统相关扩展]</li><li>Filter Data Filtering[变量与类型相关扩展]</li><li>FTP 实现了通过 FTP 协议访问文件服务器的客户端[FTP]</li><li>GD 图像处理[GD]</li><li>Gettext 实现了NLS (Native Language Support) API，他可以用来国际化您的PHP程序[国际化与字符编码支持]</li><li>Hash 哈希信息摘要框架[加密扩展]</li><li>iconv 字符集转换[国际化与字符编码支持]</li><li>Json JavaScript对象符号[其它基本扩展]</li><li>LDAP Lightweight Directory Access Protocol[其它服务]</li><li>libxml [XML 操作]</li><li>mbstring 多字节字符串[国际化与字符编码支持]</li><li>MySQLi MySQL增强版扩展[MySQL]</li><li>Mysqlnd MySQL Native Driver[MySQL]</li><li>ODBC [数据库抽象层]</li><li>OpenSSL 对称/非对称加解密，以及 PBKDF2、 PKCS7、 PKCS12、 X509 和其他加密操作[加密扩展]</li><li>PCNTL 进程控制[进程控制扩展]</li><li>PCRE 正则表达式(兼容 Perl)[文本处理]</li><li>PDO PHP 数据对象[数据库抽象层]</li><li>PDO_MYSQL MySQL Functions[PDO 驱动]</li><li>PDO_ODBC ODBC and DB2 Functions[PDO 驱动]</li><li>PDO_SQLITE SQLite Functions[PDO 驱动]</li><li>Phar [压缩与归档扩展]</li><li>POSIX [进程控制扩展]</li><li>Readline 实现了访问 GNU Readline 库的接口[针对命令行的扩展]</li><li>Reflection 反射[变量与类型相关扩展]</li><li>Session <ul><li>Session Handling[Session 扩展]</li></ul></li><li>shmop Shared Memory[进程控制扩展]</li><li>SimpleXML [XML 操作]</li><li>SOAP [Web 服务]</li><li>Sockets [其它服务]</li><li>SPL PHP标准库 (SPL)[其它基本扩展]</li><li>SQLite3 [针对各数据库系统对应的扩展]</li><li>Streams 流[其它基本扩展]</li><li>在PHP中有这么一族函数，他们是对UNIX的V IPC函数族的包装<ul><li>sysvmsg</li><li>sysvsem</li><li>sysvshm 内存共享方案</li></ul></li><li>Tokenizer [其它基本扩展]</li><li>WDDX [XML 操作]</li><li>XML<ul><li>XML 解析器[XML 操作]</li></ul></li><li>XMLReader [XML 操作]</li><li>XML-RPC [Web 服务]</li><li>XMLWriter [XML 操作]</li><li>XSL [XML 操作]</li><li>Zip [压缩与归档扩展]</li><li>Zlib<ul><li>Zlib Compression [压缩与归档扩展]</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;CGI&quot;&gt;&lt;a href=&quot;#CGI&quot; class=&quot;headerlink&quot; title=&quot;CGI&quot;&gt;&lt;/a&gt;CGI&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;CGI(Common Gateway Interface) 是为了保证web server传递过来的数据是标准格式的，方
      
    
    </summary>
    
      <category term="PHP" scheme="https://llwanran.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://llwanran.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>浅析Memcached, Redis, MongoDB三者的区别</title>
    <link href="https://llwanran.github.io/posts/3063279979.html"/>
    <id>https://llwanran.github.io/posts/3063279979.html</id>
    <published>2018-01-15T01:50:00.000Z</published>
    <updated>2018-01-15T06:11:26.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p><ul><li><a href="http://www.redis.cn/commands.html" target="_blank">查看Redis中文命令大全</a></li><li>Redis 负载监控——<a href="https://github.com/NetEaseGame/redis-monitor" target="_blank">redis-monitor</a>，一个 web 可视化的 redis 监控程序。</li><li>Redis 集群迁移工具 <a href="https://github.com/vipshop/redis-migrate-tool" target="_blank">Redis-Migrate-Tool</a>，基于redis复制，快速，稳定。</li><li><a href="https://www.jianshu.com/p/be32f8b681cd" target="_blank">优酷土豆的Redis服务平台化之路</a></li><li><a href="https://www.jianshu.com/p/ee2aa7fe341b" target="_blank">Redis中国用户组|唯品会Redis cluster大规模生产实践</a></li></ul><p><strong><font color="green">Redis的优点：</font></strong></p><blockquote><ol><li>支持多种数据结构，如 string（字符串）、 list(双向链表)、dict(hash表)、set(集合）、zset(排序set)、hyperloglog（基数估算）。</li><li>支持持久化操作，可以进行aof及rdb数据持久化到磁盘，从而进行数据备份或数据恢复等操作，较好的防止数据丢失的手段。</li><li>支持通过Replication进行数据复制，通过master-slave机制，可以实时进行数据的同步复制，支持多级复制和增量复制，master-slave机制是Redis进行HA的重要手段。</li><li>单线程请求，所有命令串行执行，并发情况下不需要考虑数据一致性问题。</li><li>支持pub/sub消息订阅机制，可以用来进行消息订阅与通知。</li><li>支持简单的事务需求，但业界使用场景很少，并不成熟。</li></ol></blockquote><p><strong><font color="red">Redis的局限性：</font></strong></p><blockquote><ol><li>Redis只能使用单线程，性能受限于CPU性能，故单实例CPU最高才可能达到5-6wQPS每秒（取决于数据结构，数据大小以及服务器硬件性能，日常环境中QPS高峰大约在1-2w左右）。<br>支持简单的事务需求，但业界使用场景很少，并不成熟，既是优点也是缺点。</li><li>Redis在string类型上会消耗较多内存，可以使用dict（hash表）压缩存储以降低内存耗用。</li><li>Mc和Redis都是Key-Value类型，不适合在不同数据集之间建立关系，也不适合进行查询搜索。比如redis的keys pattern这种匹配操作，对redis的性能是灾难。</li></ol></blockquote><p><img src="/images/pasted-2.png" alt="upload successful"></p><h3 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h3><p>是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态、数据库驱动网站的速度。Memcached基于一个存储键/值对的hashmap。其守护进程（daemon ）是用C写的，但是客户端可以用任何语言来编写，并通过memcached协议与守护进程通信。</p><p><strong><font color="green">Memcached的优点：</font></strong></p><blockquote><ol><li>Memcached可以利用多核优势，单实例吞吐量极高，可以达到几十万QPS（取决于key、value的字节大小以及服务器硬件性能，日常环境中QPS高峰大约在4-6w左右）。适用于最大程度扛量。</li><li>支持直接配置为session handle。</li></ol></blockquote><p><strong><font color="red">Memcached的局限性：</font></strong></p><blockquote><ol><li>只支持简单的key/value数据结构，不像Redis可以支持丰富的数据类型。</li><li>无法进行持久化，数据不能备份，只能用于缓存使用，且重启后数据全部丢失。</li><li>无法进行数据同步，不能将MC中的数据迁移到其他MC实例中。</li><li>Memcached内存分配采用Slab Allocation机制管理内存，value大小分布差异较大时会造成内存利用率降低，并引发低利用率时依然出现踢出等问题。需要用户注重value设计。</li></ol></blockquote><p><img src="/images/pasted-1.png" alt="upload successful"></p><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p>是一个基于分布式文件存储的数据库，文档型的非关系型数据库，与上面两者不同。</p><p>先解释一下文档的数据库，即可以存放xml、json、bson类型系那个的数据。</p><p>这些数据具备自述性（self-describing），呈现分层的树状数据结构。redis可以用hash存放简单关系型数据。</p><p>MongoDB存放json格式数据。</p><p>适合场景：事件记录、内容管理或者博客平台，比如评论系统。</p><p><img src="/images/pasted-3.png" alt="upload successful"></p><hr><h6 id="Redis与Memcached的比较"><a href="#Redis与Memcached的比较" class="headerlink" title="Redis与Memcached的比较"></a>Redis与Memcached的比较</h6><blockquote><p>1、<strong>数据类型支持不同</strong></p></blockquote><p>与Memcached仅支持简单的key-value结构的数据记录不同，Redis支持的数据类型要丰富得多。最为常用的数据类型主要由五种：String、Hash、List、Set和Sorted Set。Redis内部使用一个redisObject对象来表示所有的key和value。</p><blockquote><p>2、<strong>内存管理机制不同</strong></p></blockquote><p>在Redis中，并不是所有的数据都一直存储在内存中的。这是和Memcached相比一个最大的区别。</p><p>当物理内存用完时，Redis可以将一些很久没用到的value交换到磁盘。Redis只会缓存所有的key的信息，如果Redis发现内存的使用量超过了某一个阀值，将触发swap的操作，Redis根据“swappability = age*log(size_in_memory)”计算出哪些key对应的value需要swap到磁盘。然后再将这些key对应的value持久化到磁盘中，同时在内存中清除。</p><p>这种特性使得Redis可以保持超过其机器本身内存大小的数据。当然，机器本身的内存必须要能够保持所有的key，毕竟这些数据是不会进行swap操作的。同时由于Redis将内存中的数据swap到磁盘中的时候，提供服务的主线程和进行swap操作的子线程会共享这部分内存，所以如果更新需要swap的数据，Redis将阻塞这个操作，直到子线程完成swap操作后才可以进行修改。</p><p>当从Redis中读取数据的时候，如果读取的key对应的value不在内存中，那么Redis就需要从swap文件中加载相应数据，然后再返回给请求方。 这里就存在一个I/O线程池的问题。在默认的情况下，Redis会出现阻塞，即完成所有的swap文件加载后才会相应。这种策略在客户端的数量较小，进行批量操作的时候比较合适。但是如果将Redis应用在一个大型的网站应用程序中，这显然是无法满足大并发的情况的。所以Redis运行我们设置I/O线程池的大小，对需要从swap文件中加载相应数据的读取请求进行并发操作，减少阻塞的时间。</p><blockquote><p>3、<strong>数据持久化支持</strong></p></blockquote><p>Redis虽然是基于内存的存储系统，但是它本身是支持内存数据的持久化的，而且提供两种主要的持久化策略：RDB快照和AOF日志。而memcached是不支持数据持久化操作的。</p><blockquote><p>4、<strong>集群管理的不同</strong></p></blockquote><p>Memcached是全内存的数据缓冲系统，Redis虽然支持数据的持久化，但是全内存毕竟才是其高性能的本质。作为基于内存的存储系统来说，机器物理内存的大小就是系统能够容纳的最大数据量。如果需要处理的数据量超过了单台机器的物理内存大小，就需要构建分布式集群来扩展存储能力。</p><p><font color="red">Memcached本身并不支持分布式</font>，因此只能在客户端通过像一致性哈希这样的分布式算法来实现Memcached的分布式存储。</p><p><strong>结论</strong></p><ul><li><font color="red">没有必要过多的关心性能，因为二者的性能都已经足够高了。</font>由于Redis只使用单核，而Memcached可以使用多核，所以在比较上，平均每一个核上Redis在存储小数据时比Memcached性能更高。而在100k以上的数据中，Memcached性能要高于Redis，虽然Redis最近也在存储大数据的性能上进行优化，但是比起Memcached，还是稍有逊色。说了这么多，结论是，无论你使用哪一个，每秒处理请求的次数都不会成为瓶颈。（比如瓶颈可能会在网卡）</li><li>如果要说内存使用效率，使用简单的key-value存储的话，Memcached的内存利用率更高，而如果Redis采用hash结构来做key-value存储，由于其组合式的压缩，其内存利用率会高于Memcached。当然，这和你的应用场景和数据特性有关。</li><li>如果你对数据持久化和数据同步有所要求，那么推荐你选择Redis，因为这两个特性Memcached都不具备。即使你只是希望在升级或者重启系统后缓存数据不会丢失，选择Redis也是明智的。</li><li>当然，最后还得说到你的具体应用需求。Redis相比Memcached来说，拥有更多的数据结构和并支持更丰富的数据操作，通常在Memcached里，你需要将数据拿到客户端来进行类似的修改再set回去。这大大增加了网络IO的次数和数据体积。在Redis中，这些复杂的操作通常和一般的GET/SET一样高效。所以，如果你需要缓存能够支持更复杂的结构和操作，那么Redis会是不错的选择。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h3&gt;&lt;p&gt;是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构
      
    
    </summary>
    
    
      <category term="nosql" scheme="https://llwanran.github.io/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>javascript中模块的发展历程</title>
    <link href="https://llwanran.github.io/posts/1099660432.html"/>
    <id>https://llwanran.github.io/posts/1099660432.html</id>
    <published>2018-01-06T09:29:00.000Z</published>
    <updated>2018-01-15T06:46:04.836Z</updated>
    
    <content type="html"><![CDATA[<h6 id="一、模块的重要性"><a href="#一、模块的重要性" class="headerlink" title="一、模块的重要性"></a>一、模块的重要性</h6><p>Javascript不是一种模块化编程语言，它不支持”类”（class），更别说”模块”（module）了。<br>开发者们做了很多努力，在现有的运行环境中，实现”模块”的效果。</p><h6 id="没有模块的日子里"><a href="#没有模块的日子里" class="headerlink" title="没有模块的日子里"></a>没有模块的日子里</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>后果：</p><p>全局变量的灾难；<br>函数命名冲突；<br>依赖关系不好管理。</p><h6 id="js模块的前身（为了解决以上问题）"><a href="#js模块的前身（为了解决以上问题）" class="headerlink" title="js模块的前身（为了解决以上问题）"></a>js模块的前身（为了解决以上问题）</h6><p><strong>1. 面对对象的写法：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a:<span class="number">1</span>,</span><br><span class="line">b:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>优点：<br>1、解决了变量污染的问题；<br>2、保证模块名唯一即可，建立同一模块内的成员的关系。<br>缺点：<br>1、暴露所有模块成员，内部状态可以被外部任意改写。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.a =<span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><p><strong>2. 匿名自执行函数：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">a:<span class="number">1</span>,</span><br><span class="line">b:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>优点：<br>1、解决暴露所有模块成员，内部状态可以被外部任意改写的问题。<br>缺点：<br>1、所需依赖还是得外部提前提供。</p><h6 id="二、commonJS"><a href="#二、commonJS" class="headerlink" title="二、commonJS"></a>二、commonJS</h6><p>2009年，对js是历史性的一年，nodeJS横空出世，让js跑在服务端，如果说js在浏览器上面可以没有模块，但是在服务端没有模块的思想是万万不能容忍的。<br>由Mozilla 的工程师 Kevin Dangoor 在2009年1月创建了commonJS规范。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建模块 one.js</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'aaaa'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">a: a,</span><br><span class="line">b: b</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//加载模块 two.js</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="built_in">require</span>(<span class="string">'./one.js'</span>);</span><br><span class="line">x.b();</span><br></pre></td></tr></table></figure></p><p>优点：<br>1、所有代码都运行在模块作用域，不会污染全局作用域；<br>2、独立性是模块的重要特点就，模块内部最好不与程序的其他部分直接交互；<br>3、模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存；<br>4、模块加载的顺序，按照其在代码中出现的顺序。<br>node推广了commonJS规范，但是在浏览器中又出现了很多问题<br>问题：<br>浏览器资源的加载方式与服务端完全不同。服务端require一个模块，直接就从硬盘或者内存中读取了，消耗的时间可以忽略。而浏览器则不同，需要从服务端来下载这个文件，然后运行里面的代码才能得到API，需要花费一个http请求，也就是说，require后面的一行代码，需要资源请求完成才能执行。<br>由于浏览器端是以插入script标签的形式来加载资源的（ajax方式不行，有跨域问题）没办法让代码同步执行，所以像commonjs那样的写法会直接报错。<br>这意味着要想适应浏览器，规范还要改进！！！<br>一个<a href="http://wiki.commonjs.org/wiki/Modules/Wrappings" target="_blank">Modules/Wrappings</a>规范出现了。</p><h6 id="三、AMD"><a href="#三、AMD" class="headerlink" title="三、AMD"></a>三、AMD</h6><p>经过一番谈论、修改（过程忽略），AMD思想出现了…<br>AMD（Asynchronous Module Definition）：</p><ul><li>异步模块定义规范制定了定义模块的规则，这样模块和模块的依赖可以被异步加载。这和浏览器的异步加载模块的环境刚好适应（浏览器同步加载模块会导致性能、可用性、调试和跨域访问等问题）。</li><li>依赖前置，预执行（异步加载：依赖先执行，依赖必须一开始就写好，会先尽早地执行(依赖)模块 。换句话说，所有的require都被提前执行（require 可以是全局或局部 ）。</li><li>相关Api(简单实例):<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义和暴露模块</span></span><br><span class="line">define(<span class="string">"xxx"</span>, [<span class="string">"xxx"</span>, <span class="string">"xxx"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">x, x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ... ;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//加载模块</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">"xxx"</span>, <span class="string">"../xxx"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">xxx, xxx</span>) </span>&#123;</span><br><span class="line">xxxx</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>具体Api请参见：<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank">AMD (中文版)</a></p><hr><p><strong>RequireJS</strong><br>说完AMD,就不得不提把AMD在浏览器实现的RequireJS。<br>RequireJS是一个JavaScript文件和模块加载器,采用AMD规范。<br>参考文件：<a href="http://requirejs.org/docs/start.html" target="_blank">RequireJS</a></p><h6 id="三、CMD"><a href="#三、CMD" class="headerlink" title="三、CMD"></a>三、CMD</h6><p>CMD（Common Module Definition）:</p><ul><li>CMD更贴近 CommonJS Modules/1.1 和 Node Modules 规范，一个模块就是一个文件；</li><li>它推崇依赖就近，想什么时候 require 就什么时候加载，实现了懒加载（延迟执行 ）；</li><li>它也没有全局 require， 每个API都简单纯粹；</li><li>不过RequireJS从2.0开始，也改成可以延迟执行。</li><li>相关Api(简单实例):<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义和暴露模块</span></span><br><span class="line">define(<span class="string">'xxx'</span>, [<span class="string">'xxx'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">xxx, xxx, xxx</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ... ;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//加载模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports</span>) </span>&#123; </span><br><span class="line"><span class="comment">// 获取模块 a 的接口</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>); </span><br><span class="line"><span class="comment">// 调用模块 a 的方法</span></span><br><span class="line">a.doSomething(); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>seaJS</strong></p><ul><li>SeaJS遵循的CMD,将CMD在浏览器中实现；</li><li>SeaJS 是一个模块加载器;</li><li>借鉴了 RequireJS 的不少东西</li></ul><p><a href="http://www.zhangxinxu.com/sp/seajs/" target="_blank">seajs官网</a></p><p><strong>其他</strong></p><p><strong>UMD</strong></p><p>既然CommonJs和AMD风格一样流行，似乎缺少一个统一的规范。所以人们产生了这样的需求，希望有支持两种风格的“通用”模式，于是通用模块规范（UMD）诞生了。</p><p><strong>es6 modules</strong></p><ul><li>ES6自带了模块化， 也是JS第一次支持module；</li></ul><p><strong>后记</strong></p><p>本文主要记述模块的思想在浏览器的实现过程，不是一篇详细的Api教程。</p><blockquote><p>来源：<a href="http://blog.sooyoung.cn/2017/12/01/module/#more" target="_blank" rel="noopener">http://blog.sooyoung.cn/2017/12/01/module/#more</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;一、模块的重要性&quot;&gt;&lt;a href=&quot;#一、模块的重要性&quot; class=&quot;headerlink&quot; title=&quot;一、模块的重要性&quot;&gt;&lt;/a&gt;一、模块的重要性&lt;/h6&gt;&lt;p&gt;Javascript不是一种模块化编程语言，它不支持”类”（class），更别说”模块”（m
      
    
    </summary>
    
      <category term="前端" scheme="https://llwanran.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="模块" scheme="https://llwanran.github.io/tags/%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
</feed>
